"use strict";
/**
 * Pappers API
 * L\'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d\'API dans les requêtes, en utilisant le paramètre `api_token`.  L\'URL d\'accès à l\'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L\'historique des modifications (changelog) est accessible à l\'url suivante : https://www.pappers.fr/api/changelog
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RechercheApi = exports.RechercheApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://api.pappers.fr/v2';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var RechercheApiApiKeys;
(function (RechercheApiApiKeys) {
})(RechercheApiApiKeys = exports.RechercheApiApiKeys || (exports.RechercheApiApiKeys = {}));
class RechercheApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RechercheApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différentes entreprises seront renvoyées dans un tableau `resultats`, et le nombre total de résultats sera renvoyé dans le champ `total`.  Pour parcourir l\'ensemble des résultats, deux solutions sont possibles :  - La pagination (paramètres `page` et `par_page`), limitée aux 400 premiers résultats ; - Les curseurs (paramètres `curseur` et `par_curseur`).  Cette route permet également le téléchargement d\'un export des résultats de recherche au format xlsx, csv ou json. Il faut pour cela utiliser le paramètre `export`.
     * @summary Recherche les entreprises qui correspondent à des critères.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param page Page de résultats. Valeur par défaut : &#x60;1&#x60;.
     * @param parPage Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
     * @param curseur Curseur servant à parcourir l\&#39;ensemble des résultats (alternativement à la pagination qui est limitée à 400 résultats maximum). Doit valoir &#x60;*&#x60; pour la première requête, et doit pour les requêtes suivantes reprendre la valeur &#x60;curseurSuivant&#x60; retournée par la dernière réponse.
     * @param parCurseur Nombre de résultats affichés par curseur. Valeur par défaut : &#x60;50&#x60;. Valeur minimale: &#x60;1&#x60;. Valeur maximale : &#x60;1000&#x60;.
     * @param bases Bases de données dans lesquelles rechercher. Il est possible d\&#39;indiquer plusieurs bases en les séparant par des virgules. Valeur par défaut : &#x60;\&quot;entreprises\&quot;&#x60;.
     * @param precision Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
     * @param _export Si ce champ est renseigné, la requête renverra directement un export de l\&#39;ensemble des résultats de la recherche.
     * @param q Texte à rechercher. Dénomination pour une personne morale, nom et prénom pour une personne physique. Si vous recherchez dans plusieurs bases, ce paramètre sera utilisé pour rechercher dans toutes les bases.
     * @param siege Défini si la requête se base sur le siège
     * @param codeNaf Code NAF de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
     * @param departement Numéro de département de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs départements en les séparant par des virgules.
     * @param region Code de la région de l\&#39;un des établissements de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d\&#39;indiquer plusieurs codes régions en les séparant par des virgules.
     * @param codePostal Code postal de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
     * @param conventionCollective Convention collective de l\&#39;entreprise.
     * @param categorieJuridique Catégorie juridique de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l\&#39;INSEE, à l\&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
     * @param entrepriseCessee Activité de l\&#39;entreprise cessée ou non.
     * @param statutRcs Statut au RCS
     * @param objetSocial Objet social de l\&#39;entreprise déclaré au RCS.
     * @param dateImmatriculationRcsMin Date d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateImmatriculationRcsMax d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMin Date de radiation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMax Date de radiation au RCS maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param capitalMin Capital minimum de l\&#39;entreprise.
     * @param capitalMax Capital maximum de l\&#39;entreprise.
     * @param chiffreAffairesMin Chiffre d\&#39;affaires minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param chiffreAffairesMax Chiffre d\&#39;affaires maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMin Résultat minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMax Résultat maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param dateCreationMin Date de création minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateCreationMax Date de création maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param trancheEffectifMin Tranche d\&#39;effectifs minimale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param trancheEffectifMax Tranche d\&#39;effectifs maximale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param typeDirigeant Type du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param qualiteDirigeant Qualité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param nationaliteDirigeant Nationalité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param prenomDirigeant Prénom du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMin Âge minimal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMax Âge maximal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceDirigeantMin Date de naissance minimale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceDirigeantMax Date de naissance maximale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param ageBeneficiaireMin Âge minimal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageBeneficiaireMax Âge maximal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceBeneficiaireMin Date de naissance minimale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceBeneficiaireMax Date de naissance maximale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param nationaliteBeneficiaire Nationalité du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDepotDocumentMin Date de dépôt minimale du document, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMax Date de dépôt maximale du document, au format JJ-MM-AAAA.
     * @param typePublication Type de publication
     * @param datePublicationMin Date publication minimale de la publication, au format JJ-MM-AAAA.
     * @param datePublicationMax Date de publication maximale de la publication, au format JJ-MM-AAAA.
     * @param siren SIREN de l\&#39;entreprise.
     */
    recherche(apiToken, page, parPage, curseur, parCurseur, bases, precision, _export, q, siege, codeNaf, departement, region, codePostal, conventionCollective, categorieJuridique, entrepriseCessee, statutRcs, objetSocial, dateImmatriculationRcsMin, dateImmatriculationRcsMax, dateRadiationRcsMin, dateRadiationRcsMax, capitalMin, capitalMax, chiffreAffairesMin, chiffreAffairesMax, resultatMin, resultatMax, dateCreationMin, dateCreationMax, trancheEffectifMin, trancheEffectifMax, typeDirigeant, qualiteDirigeant, nationaliteDirigeant, prenomDirigeant, ageDirigeantMin, ageDirigeantMax, dateDeNaissanceDirigeantMin, dateDeNaissanceDirigeantMax, ageBeneficiaireMin, ageBeneficiaireMax, dateDeNaissanceBeneficiaireMin, dateDeNaissanceBeneficiaireMax, nationaliteBeneficiaire, dateDepotDocumentMin, dateDepotDocumentMax, typePublication, datePublicationMin, datePublicationMax, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/recherche';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling recherche.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (parPage !== undefined) {
                localVarQueryParameters['par_page'] = models_1.ObjectSerializer.serialize(parPage, "number");
            }
            if (curseur !== undefined) {
                localVarQueryParameters['curseur'] = models_1.ObjectSerializer.serialize(curseur, "string");
            }
            if (parCurseur !== undefined) {
                localVarQueryParameters['par_curseur'] = models_1.ObjectSerializer.serialize(parCurseur, "number");
            }
            if (bases !== undefined) {
                localVarQueryParameters['bases'] = models_1.ObjectSerializer.serialize(bases, "'entreprises' | 'dirigeants' | 'beneficiaires' | 'documents' | 'publications'");
            }
            if (precision !== undefined) {
                localVarQueryParameters['precision'] = models_1.ObjectSerializer.serialize(precision, "'approximative' | 'standard' | 'exacte'");
            }
            if (_export !== undefined) {
                localVarQueryParameters['export'] = models_1.ObjectSerializer.serialize(_export, "'xlsx' | 'csv' | 'json'");
            }
            if (q !== undefined) {
                localVarQueryParameters['q'] = models_1.ObjectSerializer.serialize(q, "string");
            }
            if (siege !== undefined) {
                localVarQueryParameters['siege'] = models_1.ObjectSerializer.serialize(siege, "string");
            }
            if (codeNaf !== undefined) {
                localVarQueryParameters['code_naf'] = models_1.ObjectSerializer.serialize(codeNaf, "string");
            }
            if (departement !== undefined) {
                localVarQueryParameters['departement'] = models_1.ObjectSerializer.serialize(departement, "string");
            }
            if (region !== undefined) {
                localVarQueryParameters['region'] = models_1.ObjectSerializer.serialize(region, "string");
            }
            if (codePostal !== undefined) {
                localVarQueryParameters['code_postal'] = models_1.ObjectSerializer.serialize(codePostal, "string");
            }
            if (conventionCollective !== undefined) {
                localVarQueryParameters['convention_collective'] = models_1.ObjectSerializer.serialize(conventionCollective, "string");
            }
            if (categorieJuridique !== undefined) {
                localVarQueryParameters['categorie_juridique'] = models_1.ObjectSerializer.serialize(categorieJuridique, "string");
            }
            if (entrepriseCessee !== undefined) {
                localVarQueryParameters['entreprise_cessee'] = models_1.ObjectSerializer.serialize(entrepriseCessee, "boolean");
            }
            if (statutRcs !== undefined) {
                localVarQueryParameters['statut_rcs'] = models_1.ObjectSerializer.serialize(statutRcs, "'inscrit' | 'radie' | 'non inscrit'");
            }
            if (objetSocial !== undefined) {
                localVarQueryParameters['objet_social'] = models_1.ObjectSerializer.serialize(objetSocial, "string");
            }
            if (dateImmatriculationRcsMin !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_min'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMin, "string");
            }
            if (dateImmatriculationRcsMax !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_max'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMax, "string");
            }
            if (dateRadiationRcsMin !== undefined) {
                localVarQueryParameters['date_radiation_rcs_min'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMin, "string");
            }
            if (dateRadiationRcsMax !== undefined) {
                localVarQueryParameters['date_radiation_rcs_max'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMax, "string");
            }
            if (capitalMin !== undefined) {
                localVarQueryParameters['capital_min'] = models_1.ObjectSerializer.serialize(capitalMin, "string");
            }
            if (capitalMax !== undefined) {
                localVarQueryParameters['capital_max'] = models_1.ObjectSerializer.serialize(capitalMax, "string");
            }
            if (chiffreAffairesMin !== undefined) {
                localVarQueryParameters['chiffre_affaires_min'] = models_1.ObjectSerializer.serialize(chiffreAffairesMin, "string");
            }
            if (chiffreAffairesMax !== undefined) {
                localVarQueryParameters['chiffre_affaires_max'] = models_1.ObjectSerializer.serialize(chiffreAffairesMax, "string");
            }
            if (resultatMin !== undefined) {
                localVarQueryParameters['resultat_min'] = models_1.ObjectSerializer.serialize(resultatMin, "string");
            }
            if (resultatMax !== undefined) {
                localVarQueryParameters['resultat_max'] = models_1.ObjectSerializer.serialize(resultatMax, "string");
            }
            if (dateCreationMin !== undefined) {
                localVarQueryParameters['date_creation_min'] = models_1.ObjectSerializer.serialize(dateCreationMin, "string");
            }
            if (dateCreationMax !== undefined) {
                localVarQueryParameters['date_creation_max'] = models_1.ObjectSerializer.serialize(dateCreationMax, "string");
            }
            if (trancheEffectifMin !== undefined) {
                localVarQueryParameters['tranche_effectif_min'] = models_1.ObjectSerializer.serialize(trancheEffectifMin, "string");
            }
            if (trancheEffectifMax !== undefined) {
                localVarQueryParameters['tranche_effectif_max'] = models_1.ObjectSerializer.serialize(trancheEffectifMax, "string");
            }
            if (typeDirigeant !== undefined) {
                localVarQueryParameters['type_dirigeant'] = models_1.ObjectSerializer.serialize(typeDirigeant, "'personne physique' | 'personne morale'");
            }
            if (qualiteDirigeant !== undefined) {
                localVarQueryParameters['qualite_dirigeant'] = models_1.ObjectSerializer.serialize(qualiteDirigeant, "string");
            }
            if (nationaliteDirigeant !== undefined) {
                localVarQueryParameters['nationalite_dirigeant'] = models_1.ObjectSerializer.serialize(nationaliteDirigeant, "string");
            }
            if (prenomDirigeant !== undefined) {
                localVarQueryParameters['prenom_dirigeant'] = models_1.ObjectSerializer.serialize(prenomDirigeant, "string");
            }
            if (ageDirigeantMin !== undefined) {
                localVarQueryParameters['age_dirigeant_min'] = models_1.ObjectSerializer.serialize(ageDirigeantMin, "number");
            }
            if (ageDirigeantMax !== undefined) {
                localVarQueryParameters['age_dirigeant_max'] = models_1.ObjectSerializer.serialize(ageDirigeantMax, "number");
            }
            if (dateDeNaissanceDirigeantMin !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMin, "string");
            }
            if (dateDeNaissanceDirigeantMax !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMax, "string");
            }
            if (ageBeneficiaireMin !== undefined) {
                localVarQueryParameters['age_beneficiaire_min'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMin, "number");
            }
            if (ageBeneficiaireMax !== undefined) {
                localVarQueryParameters['age_beneficiaire_max'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMax, "number");
            }
            if (dateDeNaissanceBeneficiaireMin !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMin, "string");
            }
            if (dateDeNaissanceBeneficiaireMax !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMax, "string");
            }
            if (nationaliteBeneficiaire !== undefined) {
                localVarQueryParameters['nationalite_beneficiaire'] = models_1.ObjectSerializer.serialize(nationaliteBeneficiaire, "string");
            }
            if (dateDepotDocumentMin !== undefined) {
                localVarQueryParameters['date_depot_document_min'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMin, "string");
            }
            if (dateDepotDocumentMax !== undefined) {
                localVarQueryParameters['date_depot_document_max'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMax, "string");
            }
            if (typePublication !== undefined) {
                localVarQueryParameters['type_publication'] = models_1.ObjectSerializer.serialize(typePublication, "'Création' | 'Immatriculation' | 'Modification' | 'Vente' | 'Radiation' | 'Procédure collective' | 'Dépôt des comptes'");
            }
            if (datePublicationMin !== undefined) {
                localVarQueryParameters['date_publication_min'] = models_1.ObjectSerializer.serialize(datePublicationMin, "string");
            }
            if (datePublicationMax !== undefined) {
                localVarQueryParameters['date_publication_max'] = models_1.ObjectSerializer.serialize(datePublicationMax, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Recherche200Response");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents bénéficiaires effectifs seront renvoyées dans un tableau `resultats`.
     * @summary Recherche les bénéficiaires effectifs qui correspondent à des critères.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param parPage Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
     * @param page Page de résultats. Valeur par défaut : &#x60;1&#x60;.
     * @param precision Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
     * @param q Nom et/ou prénom du bénéficiaire effectif.
     * @param ageBeneficiaireMin Âge minimal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageBeneficiaireMax Âge maximal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceBeneficiaireMin Date de naissance minimale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceBeneficiaireMax Date de naissance maximale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param nationaliteBeneficiaire Nationalité du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param codeNaf Code NAF de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
     * @param departement Numéro de département de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs départements en les séparant par des virgules.
     * @param region Code de la région de l\&#39;un des établissements de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d\&#39;indiquer plusieurs codes régions en les séparant par des virgules.
     * @param codePostal Code postal de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
     * @param conventionCollective Convention collective de l\&#39;entreprise.
     * @param categorieJuridique Catégorie juridique de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l\&#39;INSEE, à l\&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
     * @param entrepriseCessee Activité de l\&#39;entreprise cessée ou non.
     * @param statutRcs Statut au RCS
     * @param objetSocial Objet social de l\&#39;entreprise déclaré au RCS.
     * @param dateImmatriculationRcsMin Date d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateImmatriculationRcsMax d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMin Date de radiation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMax Date de radiation au RCS maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param capitalMin Capital minimum de l\&#39;entreprise.
     * @param capitalMax Capital maximum de l\&#39;entreprise.
     * @param chiffreAffairesMin Chiffre d\&#39;affaires minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param chiffreAffairesMax Chiffre d\&#39;affaires maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMin Résultat minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMax Résultat maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param dateCreationMin Date de création minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateCreationMax Date de création maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param trancheEffectifMin Tranche d\&#39;effectifs minimale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param trancheEffectifMax Tranche d\&#39;effectifs maximale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param typeDirigeant Type du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param qualiteDirigeant Qualité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param nationaliteDirigeant Nationalité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param prenomDirigeant Prénom du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMin Âge minimal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMax Âge maximal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceDirigeantMin Date de naissance minimale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceDirigeantMax Date de naissance maximale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMin Date de dépôt minimale du document, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMax Date de dépôt maximale du document, au format JJ-MM-AAAA.
     * @param typePublication Type de publication
     * @param datePublicationMin Date publication minimale de la publication, au format JJ-MM-AAAA.
     * @param datePublicationMax Date de publication maximale de la publication, au format JJ-MM-AAAA.
     * @param siren SIREN de l\&#39;entreprise.
     */
    rechercheBeneficiaires(apiToken, parPage, page, precision, q, ageBeneficiaireMin, ageBeneficiaireMax, dateDeNaissanceBeneficiaireMin, dateDeNaissanceBeneficiaireMax, nationaliteBeneficiaire, codeNaf, departement, region, codePostal, conventionCollective, categorieJuridique, entrepriseCessee, statutRcs, objetSocial, dateImmatriculationRcsMin, dateImmatriculationRcsMax, dateRadiationRcsMin, dateRadiationRcsMax, capitalMin, capitalMax, chiffreAffairesMin, chiffreAffairesMax, resultatMin, resultatMax, dateCreationMin, dateCreationMax, trancheEffectifMin, trancheEffectifMax, typeDirigeant, qualiteDirigeant, nationaliteDirigeant, prenomDirigeant, ageDirigeantMin, ageDirigeantMax, dateDeNaissanceDirigeantMin, dateDeNaissanceDirigeantMax, dateDepotDocumentMin, dateDepotDocumentMax, typePublication, datePublicationMin, datePublicationMax, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/recherche-beneficiaires';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling rechercheBeneficiaires.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (parPage !== undefined) {
                localVarQueryParameters['par_page'] = models_1.ObjectSerializer.serialize(parPage, "number");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (precision !== undefined) {
                localVarQueryParameters['precision'] = models_1.ObjectSerializer.serialize(precision, "'approximative' | 'standard' | 'exacte'");
            }
            if (q !== undefined) {
                localVarQueryParameters['q'] = models_1.ObjectSerializer.serialize(q, "string");
            }
            if (ageBeneficiaireMin !== undefined) {
                localVarQueryParameters['age_beneficiaire_min'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMin, "number");
            }
            if (ageBeneficiaireMax !== undefined) {
                localVarQueryParameters['age_beneficiaire_max'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMax, "number");
            }
            if (dateDeNaissanceBeneficiaireMin !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMin, "string");
            }
            if (dateDeNaissanceBeneficiaireMax !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMax, "string");
            }
            if (nationaliteBeneficiaire !== undefined) {
                localVarQueryParameters['nationalite_beneficiaire'] = models_1.ObjectSerializer.serialize(nationaliteBeneficiaire, "string");
            }
            if (codeNaf !== undefined) {
                localVarQueryParameters['code_naf'] = models_1.ObjectSerializer.serialize(codeNaf, "string");
            }
            if (departement !== undefined) {
                localVarQueryParameters['departement'] = models_1.ObjectSerializer.serialize(departement, "string");
            }
            if (region !== undefined) {
                localVarQueryParameters['region'] = models_1.ObjectSerializer.serialize(region, "string");
            }
            if (codePostal !== undefined) {
                localVarQueryParameters['code_postal'] = models_1.ObjectSerializer.serialize(codePostal, "string");
            }
            if (conventionCollective !== undefined) {
                localVarQueryParameters['convention_collective'] = models_1.ObjectSerializer.serialize(conventionCollective, "string");
            }
            if (categorieJuridique !== undefined) {
                localVarQueryParameters['categorie_juridique'] = models_1.ObjectSerializer.serialize(categorieJuridique, "string");
            }
            if (entrepriseCessee !== undefined) {
                localVarQueryParameters['entreprise_cessee'] = models_1.ObjectSerializer.serialize(entrepriseCessee, "boolean");
            }
            if (statutRcs !== undefined) {
                localVarQueryParameters['statut_rcs'] = models_1.ObjectSerializer.serialize(statutRcs, "'inscrit' | 'radie' | 'non inscrit'");
            }
            if (objetSocial !== undefined) {
                localVarQueryParameters['objet_social'] = models_1.ObjectSerializer.serialize(objetSocial, "string");
            }
            if (dateImmatriculationRcsMin !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_min'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMin, "string");
            }
            if (dateImmatriculationRcsMax !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_max'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMax, "string");
            }
            if (dateRadiationRcsMin !== undefined) {
                localVarQueryParameters['date_radiation_rcs_min'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMin, "string");
            }
            if (dateRadiationRcsMax !== undefined) {
                localVarQueryParameters['date_radiation_rcs_max'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMax, "string");
            }
            if (capitalMin !== undefined) {
                localVarQueryParameters['capital_min'] = models_1.ObjectSerializer.serialize(capitalMin, "string");
            }
            if (capitalMax !== undefined) {
                localVarQueryParameters['capital_max'] = models_1.ObjectSerializer.serialize(capitalMax, "string");
            }
            if (chiffreAffairesMin !== undefined) {
                localVarQueryParameters['chiffre_affaires_min'] = models_1.ObjectSerializer.serialize(chiffreAffairesMin, "string");
            }
            if (chiffreAffairesMax !== undefined) {
                localVarQueryParameters['chiffre_affaires_max'] = models_1.ObjectSerializer.serialize(chiffreAffairesMax, "string");
            }
            if (resultatMin !== undefined) {
                localVarQueryParameters['resultat_min'] = models_1.ObjectSerializer.serialize(resultatMin, "string");
            }
            if (resultatMax !== undefined) {
                localVarQueryParameters['resultat_max'] = models_1.ObjectSerializer.serialize(resultatMax, "string");
            }
            if (dateCreationMin !== undefined) {
                localVarQueryParameters['date_creation_min'] = models_1.ObjectSerializer.serialize(dateCreationMin, "string");
            }
            if (dateCreationMax !== undefined) {
                localVarQueryParameters['date_creation_max'] = models_1.ObjectSerializer.serialize(dateCreationMax, "string");
            }
            if (trancheEffectifMin !== undefined) {
                localVarQueryParameters['tranche_effectif_min'] = models_1.ObjectSerializer.serialize(trancheEffectifMin, "string");
            }
            if (trancheEffectifMax !== undefined) {
                localVarQueryParameters['tranche_effectif_max'] = models_1.ObjectSerializer.serialize(trancheEffectifMax, "string");
            }
            if (typeDirigeant !== undefined) {
                localVarQueryParameters['type_dirigeant'] = models_1.ObjectSerializer.serialize(typeDirigeant, "'personne physique' | 'personne morale'");
            }
            if (qualiteDirigeant !== undefined) {
                localVarQueryParameters['qualite_dirigeant'] = models_1.ObjectSerializer.serialize(qualiteDirigeant, "string");
            }
            if (nationaliteDirigeant !== undefined) {
                localVarQueryParameters['nationalite_dirigeant'] = models_1.ObjectSerializer.serialize(nationaliteDirigeant, "string");
            }
            if (prenomDirigeant !== undefined) {
                localVarQueryParameters['prenom_dirigeant'] = models_1.ObjectSerializer.serialize(prenomDirigeant, "string");
            }
            if (ageDirigeantMin !== undefined) {
                localVarQueryParameters['age_dirigeant_min'] = models_1.ObjectSerializer.serialize(ageDirigeantMin, "number");
            }
            if (ageDirigeantMax !== undefined) {
                localVarQueryParameters['age_dirigeant_max'] = models_1.ObjectSerializer.serialize(ageDirigeantMax, "number");
            }
            if (dateDeNaissanceDirigeantMin !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMin, "string");
            }
            if (dateDeNaissanceDirigeantMax !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMax, "string");
            }
            if (dateDepotDocumentMin !== undefined) {
                localVarQueryParameters['date_depot_document_min'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMin, "string");
            }
            if (dateDepotDocumentMax !== undefined) {
                localVarQueryParameters['date_depot_document_max'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMax, "string");
            }
            if (typePublication !== undefined) {
                localVarQueryParameters['type_publication'] = models_1.ObjectSerializer.serialize(typePublication, "'Création' | 'Immatriculation' | 'Modification' | 'Vente' | 'Radiation' | 'Procédure collective' | 'Dépôt des comptes'");
            }
            if (datePublicationMin !== undefined) {
                localVarQueryParameters['date_publication_min'] = models_1.ObjectSerializer.serialize(datePublicationMin, "string");
            }
            if (datePublicationMax !== undefined) {
                localVarQueryParameters['date_publication_max'] = models_1.ObjectSerializer.serialize(datePublicationMax, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RechercheBeneficiaires200Response");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents dirigeants seront renvoyées dans un tableau `resultats`.
     * @summary Recherche les dirigeants qui correspondent à des critères.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param parPage Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
     * @param page Page de résultats. Valeur par défaut : &#x60;1&#x60;.
     * @param precision Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
     * @param q Texte à rechercher. Nom et prénom du dirigeant pour une personne physique, dénomination pour une personne morale.
     * @param typeDirigeant Type du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param qualiteDirigeant Qualité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param nationaliteDirigeant Nationalité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param prenomDirigeant Prénom du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMin Âge minimal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMax Âge maximal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceDirigeantMin Date de naissance minimale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceDirigeantMax Date de naissance maximale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param codeNaf Code NAF de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
     * @param departement Numéro de département de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs départements en les séparant par des virgules.
     * @param region Code de la région de l\&#39;un des établissements de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d\&#39;indiquer plusieurs codes régions en les séparant par des virgules.
     * @param codePostal Code postal de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
     * @param conventionCollective Convention collective de l\&#39;entreprise.
     * @param categorieJuridique Catégorie juridique de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l\&#39;INSEE, à l\&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
     * @param entrepriseCessee Activité de l\&#39;entreprise cessée ou non.
     * @param statutRcs Statut au RCS
     * @param objetSocial Objet social de l\&#39;entreprise déclaré au RCS.
     * @param dateImmatriculationRcsMin Date d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateImmatriculationRcsMax d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMin Date de radiation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMax Date de radiation au RCS maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param capitalMin Capital minimum de l\&#39;entreprise.
     * @param capitalMax Capital maximum de l\&#39;entreprise.
     * @param chiffreAffairesMin Chiffre d\&#39;affaires minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param chiffreAffairesMax Chiffre d\&#39;affaires maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMin Résultat minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMax Résultat maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param dateCreationMin Date de création minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateCreationMax Date de création maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param trancheEffectifMin Tranche d\&#39;effectifs minimale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param trancheEffectifMax Tranche d\&#39;effectifs maximale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param ageBeneficiaireMin Âge minimal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageBeneficiaireMax Âge maximal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceBeneficiaireMin Date de naissance minimale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceBeneficiaireMax Date de naissance maximale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param nationaliteBeneficiaire Nationalité du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDepotDocumentMin Date de dépôt minimale du document, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMax Date de dépôt maximale du document, au format JJ-MM-AAAA.
     * @param typePublication Type de publication
     * @param datePublicationMin Date publication minimale de la publication, au format JJ-MM-AAAA.
     * @param datePublicationMax Date de publication maximale de la publication, au format JJ-MM-AAAA.
     * @param siren SIREN de l\&#39;entreprise.
     */
    rechercheDirigeants(apiToken, parPage, page, precision, q, typeDirigeant, qualiteDirigeant, nationaliteDirigeant, prenomDirigeant, ageDirigeantMin, ageDirigeantMax, dateDeNaissanceDirigeantMin, dateDeNaissanceDirigeantMax, codeNaf, departement, region, codePostal, conventionCollective, categorieJuridique, entrepriseCessee, statutRcs, objetSocial, dateImmatriculationRcsMin, dateImmatriculationRcsMax, dateRadiationRcsMin, dateRadiationRcsMax, capitalMin, capitalMax, chiffreAffairesMin, chiffreAffairesMax, resultatMin, resultatMax, dateCreationMin, dateCreationMax, trancheEffectifMin, trancheEffectifMax, ageBeneficiaireMin, ageBeneficiaireMax, dateDeNaissanceBeneficiaireMin, dateDeNaissanceBeneficiaireMax, nationaliteBeneficiaire, dateDepotDocumentMin, dateDepotDocumentMax, typePublication, datePublicationMin, datePublicationMax, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/recherche-dirigeants';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling rechercheDirigeants.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (parPage !== undefined) {
                localVarQueryParameters['par_page'] = models_1.ObjectSerializer.serialize(parPage, "number");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (precision !== undefined) {
                localVarQueryParameters['precision'] = models_1.ObjectSerializer.serialize(precision, "'approximative' | 'standard' | 'exacte'");
            }
            if (q !== undefined) {
                localVarQueryParameters['q'] = models_1.ObjectSerializer.serialize(q, "string");
            }
            if (typeDirigeant !== undefined) {
                localVarQueryParameters['type_dirigeant'] = models_1.ObjectSerializer.serialize(typeDirigeant, "'personne physique' | 'personne morale'");
            }
            if (qualiteDirigeant !== undefined) {
                localVarQueryParameters['qualite_dirigeant'] = models_1.ObjectSerializer.serialize(qualiteDirigeant, "string");
            }
            if (nationaliteDirigeant !== undefined) {
                localVarQueryParameters['nationalite_dirigeant'] = models_1.ObjectSerializer.serialize(nationaliteDirigeant, "string");
            }
            if (prenomDirigeant !== undefined) {
                localVarQueryParameters['prenom_dirigeant'] = models_1.ObjectSerializer.serialize(prenomDirigeant, "string");
            }
            if (ageDirigeantMin !== undefined) {
                localVarQueryParameters['age_dirigeant_min'] = models_1.ObjectSerializer.serialize(ageDirigeantMin, "number");
            }
            if (ageDirigeantMax !== undefined) {
                localVarQueryParameters['age_dirigeant_max'] = models_1.ObjectSerializer.serialize(ageDirigeantMax, "number");
            }
            if (dateDeNaissanceDirigeantMin !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMin, "string");
            }
            if (dateDeNaissanceDirigeantMax !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMax, "string");
            }
            if (codeNaf !== undefined) {
                localVarQueryParameters['code_naf'] = models_1.ObjectSerializer.serialize(codeNaf, "string");
            }
            if (departement !== undefined) {
                localVarQueryParameters['departement'] = models_1.ObjectSerializer.serialize(departement, "string");
            }
            if (region !== undefined) {
                localVarQueryParameters['region'] = models_1.ObjectSerializer.serialize(region, "string");
            }
            if (codePostal !== undefined) {
                localVarQueryParameters['code_postal'] = models_1.ObjectSerializer.serialize(codePostal, "string");
            }
            if (conventionCollective !== undefined) {
                localVarQueryParameters['convention_collective'] = models_1.ObjectSerializer.serialize(conventionCollective, "string");
            }
            if (categorieJuridique !== undefined) {
                localVarQueryParameters['categorie_juridique'] = models_1.ObjectSerializer.serialize(categorieJuridique, "string");
            }
            if (entrepriseCessee !== undefined) {
                localVarQueryParameters['entreprise_cessee'] = models_1.ObjectSerializer.serialize(entrepriseCessee, "boolean");
            }
            if (statutRcs !== undefined) {
                localVarQueryParameters['statut_rcs'] = models_1.ObjectSerializer.serialize(statutRcs, "'inscrit' | 'radie' | 'non inscrit'");
            }
            if (objetSocial !== undefined) {
                localVarQueryParameters['objet_social'] = models_1.ObjectSerializer.serialize(objetSocial, "string");
            }
            if (dateImmatriculationRcsMin !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_min'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMin, "string");
            }
            if (dateImmatriculationRcsMax !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_max'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMax, "string");
            }
            if (dateRadiationRcsMin !== undefined) {
                localVarQueryParameters['date_radiation_rcs_min'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMin, "string");
            }
            if (dateRadiationRcsMax !== undefined) {
                localVarQueryParameters['date_radiation_rcs_max'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMax, "string");
            }
            if (capitalMin !== undefined) {
                localVarQueryParameters['capital_min'] = models_1.ObjectSerializer.serialize(capitalMin, "string");
            }
            if (capitalMax !== undefined) {
                localVarQueryParameters['capital_max'] = models_1.ObjectSerializer.serialize(capitalMax, "string");
            }
            if (chiffreAffairesMin !== undefined) {
                localVarQueryParameters['chiffre_affaires_min'] = models_1.ObjectSerializer.serialize(chiffreAffairesMin, "string");
            }
            if (chiffreAffairesMax !== undefined) {
                localVarQueryParameters['chiffre_affaires_max'] = models_1.ObjectSerializer.serialize(chiffreAffairesMax, "string");
            }
            if (resultatMin !== undefined) {
                localVarQueryParameters['resultat_min'] = models_1.ObjectSerializer.serialize(resultatMin, "string");
            }
            if (resultatMax !== undefined) {
                localVarQueryParameters['resultat_max'] = models_1.ObjectSerializer.serialize(resultatMax, "string");
            }
            if (dateCreationMin !== undefined) {
                localVarQueryParameters['date_creation_min'] = models_1.ObjectSerializer.serialize(dateCreationMin, "string");
            }
            if (dateCreationMax !== undefined) {
                localVarQueryParameters['date_creation_max'] = models_1.ObjectSerializer.serialize(dateCreationMax, "string");
            }
            if (trancheEffectifMin !== undefined) {
                localVarQueryParameters['tranche_effectif_min'] = models_1.ObjectSerializer.serialize(trancheEffectifMin, "string");
            }
            if (trancheEffectifMax !== undefined) {
                localVarQueryParameters['tranche_effectif_max'] = models_1.ObjectSerializer.serialize(trancheEffectifMax, "string");
            }
            if (ageBeneficiaireMin !== undefined) {
                localVarQueryParameters['age_beneficiaire_min'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMin, "number");
            }
            if (ageBeneficiaireMax !== undefined) {
                localVarQueryParameters['age_beneficiaire_max'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMax, "number");
            }
            if (dateDeNaissanceBeneficiaireMin !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMin, "string");
            }
            if (dateDeNaissanceBeneficiaireMax !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMax, "string");
            }
            if (nationaliteBeneficiaire !== undefined) {
                localVarQueryParameters['nationalite_beneficiaire'] = models_1.ObjectSerializer.serialize(nationaliteBeneficiaire, "string");
            }
            if (dateDepotDocumentMin !== undefined) {
                localVarQueryParameters['date_depot_document_min'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMin, "string");
            }
            if (dateDepotDocumentMax !== undefined) {
                localVarQueryParameters['date_depot_document_max'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMax, "string");
            }
            if (typePublication !== undefined) {
                localVarQueryParameters['type_publication'] = models_1.ObjectSerializer.serialize(typePublication, "'Création' | 'Immatriculation' | 'Modification' | 'Vente' | 'Radiation' | 'Procédure collective' | 'Dépôt des comptes'");
            }
            if (datePublicationMin !== undefined) {
                localVarQueryParameters['date_publication_min'] = models_1.ObjectSerializer.serialize(datePublicationMin, "string");
            }
            if (datePublicationMax !== undefined) {
                localVarQueryParameters['date_publication_max'] = models_1.ObjectSerializer.serialize(datePublicationMax, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RechercheDirigeants200Response");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents documents seront renvoyées dans un tableau `resultats`.
     * @summary Recherche les documents qui correspondent à des critères.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param parPage Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
     * @param page Page de résultats. Valeur par défaut : &#x60;1&#x60;.
     * @param precision Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
     * @param q Mot-clé à rechercher dans le contenu du document.
     * @param dateDepotDocumentMin Date de dépôt minimale du document, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMax Date de dépôt maximale du document, au format JJ-MM-AAAA.
     * @param codeNaf Code NAF de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
     * @param departement Numéro de département de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs départements en les séparant par des virgules.
     * @param region Code de la région de l\&#39;un des établissements de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d\&#39;indiquer plusieurs codes régions en les séparant par des virgules.
     * @param codePostal Code postal de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
     * @param conventionCollective Convention collective de l\&#39;entreprise.
     * @param categorieJuridique Catégorie juridique de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l\&#39;INSEE, à l\&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
     * @param entrepriseCessee Activité de l\&#39;entreprise cessée ou non.
     * @param statutRcs Statut au RCS
     * @param objetSocial Objet social de l\&#39;entreprise déclaré au RCS.
     * @param dateImmatriculationRcsMin Date d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateImmatriculationRcsMax d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMin Date de radiation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMax Date de radiation au RCS maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param capitalMin Capital minimum de l\&#39;entreprise.
     * @param capitalMax Capital maximum de l\&#39;entreprise.
     * @param chiffreAffairesMin Chiffre d\&#39;affaires minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param chiffreAffairesMax Chiffre d\&#39;affaires maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMin Résultat minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMax Résultat maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param dateCreationMin Date de création minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateCreationMax Date de création maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param trancheEffectifMin Tranche d\&#39;effectifs minimale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param trancheEffectifMax Tranche d\&#39;effectifs maximale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param typeDirigeant Type du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param qualiteDirigeant Qualité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param nationaliteDirigeant Nationalité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param prenomDirigeant Prénom du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMin Âge minimal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMax Âge maximal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceDirigeantMin Date de naissance minimale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceDirigeantMax Date de naissance maximale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param ageBeneficiaireMin Âge minimal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageBeneficiaireMax Âge maximal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceBeneficiaireMin Date de naissance minimale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceBeneficiaireMax Date de naissance maximale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param nationaliteBeneficiaire Nationalité du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param typePublication Type de publication
     * @param datePublicationMin Date publication minimale de la publication, au format JJ-MM-AAAA.
     * @param datePublicationMax Date de publication maximale de la publication, au format JJ-MM-AAAA.
     * @param siren SIREN de l\&#39;entreprise.
     */
    rechercheDocuments(apiToken, parPage, page, precision, q, dateDepotDocumentMin, dateDepotDocumentMax, codeNaf, departement, region, codePostal, conventionCollective, categorieJuridique, entrepriseCessee, statutRcs, objetSocial, dateImmatriculationRcsMin, dateImmatriculationRcsMax, dateRadiationRcsMin, dateRadiationRcsMax, capitalMin, capitalMax, chiffreAffairesMin, chiffreAffairesMax, resultatMin, resultatMax, dateCreationMin, dateCreationMax, trancheEffectifMin, trancheEffectifMax, typeDirigeant, qualiteDirigeant, nationaliteDirigeant, prenomDirigeant, ageDirigeantMin, ageDirigeantMax, dateDeNaissanceDirigeantMin, dateDeNaissanceDirigeantMax, ageBeneficiaireMin, ageBeneficiaireMax, dateDeNaissanceBeneficiaireMin, dateDeNaissanceBeneficiaireMax, nationaliteBeneficiaire, typePublication, datePublicationMin, datePublicationMax, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/recherche-documents';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling rechercheDocuments.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (parPage !== undefined) {
                localVarQueryParameters['par_page'] = models_1.ObjectSerializer.serialize(parPage, "number");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (precision !== undefined) {
                localVarQueryParameters['precision'] = models_1.ObjectSerializer.serialize(precision, "'approximative' | 'standard' | 'exacte'");
            }
            if (q !== undefined) {
                localVarQueryParameters['q'] = models_1.ObjectSerializer.serialize(q, "string");
            }
            if (dateDepotDocumentMin !== undefined) {
                localVarQueryParameters['date_depot_document_min'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMin, "string");
            }
            if (dateDepotDocumentMax !== undefined) {
                localVarQueryParameters['date_depot_document_max'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMax, "string");
            }
            if (codeNaf !== undefined) {
                localVarQueryParameters['code_naf'] = models_1.ObjectSerializer.serialize(codeNaf, "string");
            }
            if (departement !== undefined) {
                localVarQueryParameters['departement'] = models_1.ObjectSerializer.serialize(departement, "string");
            }
            if (region !== undefined) {
                localVarQueryParameters['region'] = models_1.ObjectSerializer.serialize(region, "string");
            }
            if (codePostal !== undefined) {
                localVarQueryParameters['code_postal'] = models_1.ObjectSerializer.serialize(codePostal, "string");
            }
            if (conventionCollective !== undefined) {
                localVarQueryParameters['convention_collective'] = models_1.ObjectSerializer.serialize(conventionCollective, "string");
            }
            if (categorieJuridique !== undefined) {
                localVarQueryParameters['categorie_juridique'] = models_1.ObjectSerializer.serialize(categorieJuridique, "string");
            }
            if (entrepriseCessee !== undefined) {
                localVarQueryParameters['entreprise_cessee'] = models_1.ObjectSerializer.serialize(entrepriseCessee, "boolean");
            }
            if (statutRcs !== undefined) {
                localVarQueryParameters['statut_rcs'] = models_1.ObjectSerializer.serialize(statutRcs, "'inscrit' | 'radie' | 'non inscrit'");
            }
            if (objetSocial !== undefined) {
                localVarQueryParameters['objet_social'] = models_1.ObjectSerializer.serialize(objetSocial, "string");
            }
            if (dateImmatriculationRcsMin !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_min'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMin, "string");
            }
            if (dateImmatriculationRcsMax !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_max'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMax, "string");
            }
            if (dateRadiationRcsMin !== undefined) {
                localVarQueryParameters['date_radiation_rcs_min'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMin, "string");
            }
            if (dateRadiationRcsMax !== undefined) {
                localVarQueryParameters['date_radiation_rcs_max'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMax, "string");
            }
            if (capitalMin !== undefined) {
                localVarQueryParameters['capital_min'] = models_1.ObjectSerializer.serialize(capitalMin, "string");
            }
            if (capitalMax !== undefined) {
                localVarQueryParameters['capital_max'] = models_1.ObjectSerializer.serialize(capitalMax, "string");
            }
            if (chiffreAffairesMin !== undefined) {
                localVarQueryParameters['chiffre_affaires_min'] = models_1.ObjectSerializer.serialize(chiffreAffairesMin, "string");
            }
            if (chiffreAffairesMax !== undefined) {
                localVarQueryParameters['chiffre_affaires_max'] = models_1.ObjectSerializer.serialize(chiffreAffairesMax, "string");
            }
            if (resultatMin !== undefined) {
                localVarQueryParameters['resultat_min'] = models_1.ObjectSerializer.serialize(resultatMin, "string");
            }
            if (resultatMax !== undefined) {
                localVarQueryParameters['resultat_max'] = models_1.ObjectSerializer.serialize(resultatMax, "string");
            }
            if (dateCreationMin !== undefined) {
                localVarQueryParameters['date_creation_min'] = models_1.ObjectSerializer.serialize(dateCreationMin, "string");
            }
            if (dateCreationMax !== undefined) {
                localVarQueryParameters['date_creation_max'] = models_1.ObjectSerializer.serialize(dateCreationMax, "string");
            }
            if (trancheEffectifMin !== undefined) {
                localVarQueryParameters['tranche_effectif_min'] = models_1.ObjectSerializer.serialize(trancheEffectifMin, "string");
            }
            if (trancheEffectifMax !== undefined) {
                localVarQueryParameters['tranche_effectif_max'] = models_1.ObjectSerializer.serialize(trancheEffectifMax, "string");
            }
            if (typeDirigeant !== undefined) {
                localVarQueryParameters['type_dirigeant'] = models_1.ObjectSerializer.serialize(typeDirigeant, "'personne physique' | 'personne morale'");
            }
            if (qualiteDirigeant !== undefined) {
                localVarQueryParameters['qualite_dirigeant'] = models_1.ObjectSerializer.serialize(qualiteDirigeant, "string");
            }
            if (nationaliteDirigeant !== undefined) {
                localVarQueryParameters['nationalite_dirigeant'] = models_1.ObjectSerializer.serialize(nationaliteDirigeant, "string");
            }
            if (prenomDirigeant !== undefined) {
                localVarQueryParameters['prenom_dirigeant'] = models_1.ObjectSerializer.serialize(prenomDirigeant, "string");
            }
            if (ageDirigeantMin !== undefined) {
                localVarQueryParameters['age_dirigeant_min'] = models_1.ObjectSerializer.serialize(ageDirigeantMin, "number");
            }
            if (ageDirigeantMax !== undefined) {
                localVarQueryParameters['age_dirigeant_max'] = models_1.ObjectSerializer.serialize(ageDirigeantMax, "number");
            }
            if (dateDeNaissanceDirigeantMin !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMin, "string");
            }
            if (dateDeNaissanceDirigeantMax !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMax, "string");
            }
            if (ageBeneficiaireMin !== undefined) {
                localVarQueryParameters['age_beneficiaire_min'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMin, "number");
            }
            if (ageBeneficiaireMax !== undefined) {
                localVarQueryParameters['age_beneficiaire_max'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMax, "number");
            }
            if (dateDeNaissanceBeneficiaireMin !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMin, "string");
            }
            if (dateDeNaissanceBeneficiaireMax !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMax, "string");
            }
            if (nationaliteBeneficiaire !== undefined) {
                localVarQueryParameters['nationalite_beneficiaire'] = models_1.ObjectSerializer.serialize(nationaliteBeneficiaire, "string");
            }
            if (typePublication !== undefined) {
                localVarQueryParameters['type_publication'] = models_1.ObjectSerializer.serialize(typePublication, "'Création' | 'Immatriculation' | 'Modification' | 'Vente' | 'Radiation' | 'Procédure collective' | 'Dépôt des comptes'");
            }
            if (datePublicationMin !== undefined) {
                localVarQueryParameters['date_publication_min'] = models_1.ObjectSerializer.serialize(datePublicationMin, "string");
            }
            if (datePublicationMax !== undefined) {
                localVarQueryParameters['date_publication_max'] = models_1.ObjectSerializer.serialize(datePublicationMax, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RechercheDocuments200Response");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différentes publications seront renvoyées dans un tableau `resultats`.
     * @summary Recherche les publications BODACC qui correspondent à des critères.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param parPage Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
     * @param page Page de résultats. Valeur par défaut : &#x60;1&#x60;.
     * @param precision Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
     * @param q Mot-clé à rechercher dans le contenu de la publication.
     * @param codeNaf Code NAF de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
     * @param departement Numéro de département de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs départements en les séparant par des virgules.
     * @param region Code de la région de l\&#39;un des établissements de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d\&#39;indiquer plusieurs codes régions en les séparant par des virgules.
     * @param codePostal Code postal de l\&#39;un des établissements de l\&#39;entreprise. Il est possible d\&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
     * @param conventionCollective Convention collective de l\&#39;entreprise.
     * @param categorieJuridique Catégorie juridique de l\&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l\&#39;INSEE, à l\&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
     * @param entrepriseCessee Activité de l\&#39;entreprise cessée ou non.
     * @param statutRcs Statut au RCS
     * @param objetSocial Objet social de l\&#39;entreprise déclaré au RCS.
     * @param dateImmatriculationRcsMin Date d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateImmatriculationRcsMax d\&#39;immatriculation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMin Date de radiation au RCS minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateRadiationRcsMax Date de radiation au RCS maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param capitalMin Capital minimum de l\&#39;entreprise.
     * @param capitalMax Capital maximum de l\&#39;entreprise.
     * @param chiffreAffairesMin Chiffre d\&#39;affaires minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param chiffreAffairesMax Chiffre d\&#39;affaires maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMin Résultat minimum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param resultatMax Résultat maximum de l\&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d\&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
     * @param dateCreationMin Date de création minimale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param dateCreationMax Date de création maximale de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param trancheEffectifMin Tranche d\&#39;effectifs minimale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param trancheEffectifMax Tranche d\&#39;effectifs maximale de l\&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
     * @param typeDirigeant Type du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param qualiteDirigeant Qualité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param nationaliteDirigeant Nationalité du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param prenomDirigeant Prénom du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMin Âge minimal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageDirigeantMax Âge maximal du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceDirigeantMin Date de naissance minimale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceDirigeantMax Date de naissance maximale du dirigeant (ou de l\&#39;un des dirigeants de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param ageBeneficiaireMin Âge minimal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param ageBeneficiaireMax Âge maximal du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDeNaissanceBeneficiaireMin Date de naissance minimale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises), au format JJ-MM-AAAA.
     * @param dateDeNaissanceBeneficiaireMax Date de naissance maximale du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises) de l\&#39;entreprise, au format JJ-MM-AAAA.
     * @param nationaliteBeneficiaire Nationalité du bénéficiaire effectif (ou de l\&#39;un des bénéficiaires effectifs de l\&#39;entreprise pour une recherche d\&#39;entreprises).
     * @param dateDepotDocumentMin Date de dépôt minimale du document, au format JJ-MM-AAAA.
     * @param dateDepotDocumentMax Date de dépôt maximale du document, au format JJ-MM-AAAA.
     * @param typePublication Type de publication
     * @param datePublicationMin Date publication minimale de la publication, au format JJ-MM-AAAA.
     * @param datePublicationMax Date de publication maximale de la publication, au format JJ-MM-AAAA.
     * @param siren SIREN de l\&#39;entreprise.
     */
    recherchePublications(apiToken, parPage, page, precision, q, codeNaf, departement, region, codePostal, conventionCollective, categorieJuridique, entrepriseCessee, statutRcs, objetSocial, dateImmatriculationRcsMin, dateImmatriculationRcsMax, dateRadiationRcsMin, dateRadiationRcsMax, capitalMin, capitalMax, chiffreAffairesMin, chiffreAffairesMax, resultatMin, resultatMax, dateCreationMin, dateCreationMax, trancheEffectifMin, trancheEffectifMax, typeDirigeant, qualiteDirigeant, nationaliteDirigeant, prenomDirigeant, ageDirigeantMin, ageDirigeantMax, dateDeNaissanceDirigeantMin, dateDeNaissanceDirigeantMax, ageBeneficiaireMin, ageBeneficiaireMax, dateDeNaissanceBeneficiaireMin, dateDeNaissanceBeneficiaireMax, nationaliteBeneficiaire, dateDepotDocumentMin, dateDepotDocumentMax, typePublication, datePublicationMin, datePublicationMax, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/recherche-publications';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling recherchePublications.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (parPage !== undefined) {
                localVarQueryParameters['par_page'] = models_1.ObjectSerializer.serialize(parPage, "number");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (precision !== undefined) {
                localVarQueryParameters['precision'] = models_1.ObjectSerializer.serialize(precision, "'approximative' | 'standard' | 'exacte'");
            }
            if (q !== undefined) {
                localVarQueryParameters['q'] = models_1.ObjectSerializer.serialize(q, "string");
            }
            if (codeNaf !== undefined) {
                localVarQueryParameters['code_naf'] = models_1.ObjectSerializer.serialize(codeNaf, "string");
            }
            if (departement !== undefined) {
                localVarQueryParameters['departement'] = models_1.ObjectSerializer.serialize(departement, "string");
            }
            if (region !== undefined) {
                localVarQueryParameters['region'] = models_1.ObjectSerializer.serialize(region, "string");
            }
            if (codePostal !== undefined) {
                localVarQueryParameters['code_postal'] = models_1.ObjectSerializer.serialize(codePostal, "string");
            }
            if (conventionCollective !== undefined) {
                localVarQueryParameters['convention_collective'] = models_1.ObjectSerializer.serialize(conventionCollective, "string");
            }
            if (categorieJuridique !== undefined) {
                localVarQueryParameters['categorie_juridique'] = models_1.ObjectSerializer.serialize(categorieJuridique, "string");
            }
            if (entrepriseCessee !== undefined) {
                localVarQueryParameters['entreprise_cessee'] = models_1.ObjectSerializer.serialize(entrepriseCessee, "boolean");
            }
            if (statutRcs !== undefined) {
                localVarQueryParameters['statut_rcs'] = models_1.ObjectSerializer.serialize(statutRcs, "'inscrit' | 'radie' | 'non inscrit'");
            }
            if (objetSocial !== undefined) {
                localVarQueryParameters['objet_social'] = models_1.ObjectSerializer.serialize(objetSocial, "string");
            }
            if (dateImmatriculationRcsMin !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_min'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMin, "string");
            }
            if (dateImmatriculationRcsMax !== undefined) {
                localVarQueryParameters['date_immatriculation_rcs_max'] = models_1.ObjectSerializer.serialize(dateImmatriculationRcsMax, "string");
            }
            if (dateRadiationRcsMin !== undefined) {
                localVarQueryParameters['date_radiation_rcs_min'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMin, "string");
            }
            if (dateRadiationRcsMax !== undefined) {
                localVarQueryParameters['date_radiation_rcs_max'] = models_1.ObjectSerializer.serialize(dateRadiationRcsMax, "string");
            }
            if (capitalMin !== undefined) {
                localVarQueryParameters['capital_min'] = models_1.ObjectSerializer.serialize(capitalMin, "string");
            }
            if (capitalMax !== undefined) {
                localVarQueryParameters['capital_max'] = models_1.ObjectSerializer.serialize(capitalMax, "string");
            }
            if (chiffreAffairesMin !== undefined) {
                localVarQueryParameters['chiffre_affaires_min'] = models_1.ObjectSerializer.serialize(chiffreAffairesMin, "string");
            }
            if (chiffreAffairesMax !== undefined) {
                localVarQueryParameters['chiffre_affaires_max'] = models_1.ObjectSerializer.serialize(chiffreAffairesMax, "string");
            }
            if (resultatMin !== undefined) {
                localVarQueryParameters['resultat_min'] = models_1.ObjectSerializer.serialize(resultatMin, "string");
            }
            if (resultatMax !== undefined) {
                localVarQueryParameters['resultat_max'] = models_1.ObjectSerializer.serialize(resultatMax, "string");
            }
            if (dateCreationMin !== undefined) {
                localVarQueryParameters['date_creation_min'] = models_1.ObjectSerializer.serialize(dateCreationMin, "string");
            }
            if (dateCreationMax !== undefined) {
                localVarQueryParameters['date_creation_max'] = models_1.ObjectSerializer.serialize(dateCreationMax, "string");
            }
            if (trancheEffectifMin !== undefined) {
                localVarQueryParameters['tranche_effectif_min'] = models_1.ObjectSerializer.serialize(trancheEffectifMin, "string");
            }
            if (trancheEffectifMax !== undefined) {
                localVarQueryParameters['tranche_effectif_max'] = models_1.ObjectSerializer.serialize(trancheEffectifMax, "string");
            }
            if (typeDirigeant !== undefined) {
                localVarQueryParameters['type_dirigeant'] = models_1.ObjectSerializer.serialize(typeDirigeant, "'personne physique' | 'personne morale'");
            }
            if (qualiteDirigeant !== undefined) {
                localVarQueryParameters['qualite_dirigeant'] = models_1.ObjectSerializer.serialize(qualiteDirigeant, "string");
            }
            if (nationaliteDirigeant !== undefined) {
                localVarQueryParameters['nationalite_dirigeant'] = models_1.ObjectSerializer.serialize(nationaliteDirigeant, "string");
            }
            if (prenomDirigeant !== undefined) {
                localVarQueryParameters['prenom_dirigeant'] = models_1.ObjectSerializer.serialize(prenomDirigeant, "string");
            }
            if (ageDirigeantMin !== undefined) {
                localVarQueryParameters['age_dirigeant_min'] = models_1.ObjectSerializer.serialize(ageDirigeantMin, "number");
            }
            if (ageDirigeantMax !== undefined) {
                localVarQueryParameters['age_dirigeant_max'] = models_1.ObjectSerializer.serialize(ageDirigeantMax, "number");
            }
            if (dateDeNaissanceDirigeantMin !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMin, "string");
            }
            if (dateDeNaissanceDirigeantMax !== undefined) {
                localVarQueryParameters['date_de_naissance_dirigeant_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceDirigeantMax, "string");
            }
            if (ageBeneficiaireMin !== undefined) {
                localVarQueryParameters['age_beneficiaire_min'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMin, "number");
            }
            if (ageBeneficiaireMax !== undefined) {
                localVarQueryParameters['age_beneficiaire_max'] = models_1.ObjectSerializer.serialize(ageBeneficiaireMax, "number");
            }
            if (dateDeNaissanceBeneficiaireMin !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_min'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMin, "string");
            }
            if (dateDeNaissanceBeneficiaireMax !== undefined) {
                localVarQueryParameters['date_de_naissance_beneficiaire_max'] = models_1.ObjectSerializer.serialize(dateDeNaissanceBeneficiaireMax, "string");
            }
            if (nationaliteBeneficiaire !== undefined) {
                localVarQueryParameters['nationalite_beneficiaire'] = models_1.ObjectSerializer.serialize(nationaliteBeneficiaire, "string");
            }
            if (dateDepotDocumentMin !== undefined) {
                localVarQueryParameters['date_depot_document_min'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMin, "string");
            }
            if (dateDepotDocumentMax !== undefined) {
                localVarQueryParameters['date_depot_document_max'] = models_1.ObjectSerializer.serialize(dateDepotDocumentMax, "string");
            }
            if (typePublication !== undefined) {
                localVarQueryParameters['type_publication'] = models_1.ObjectSerializer.serialize(typePublication, "'Création' | 'Immatriculation' | 'Modification' | 'Vente' | 'Radiation' | 'Procédure collective' | 'Dépôt des comptes'");
            }
            if (datePublicationMin !== undefined) {
                localVarQueryParameters['date_publication_min'] = models_1.ObjectSerializer.serialize(datePublicationMin, "string");
            }
            if (datePublicationMax !== undefined) {
                localVarQueryParameters['date_publication_max'] = models_1.ObjectSerializer.serialize(datePublicationMax, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RecherchePublications200Response");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.RechercheApi = RechercheApi;
//# sourceMappingURL=rechercheApi.js.map