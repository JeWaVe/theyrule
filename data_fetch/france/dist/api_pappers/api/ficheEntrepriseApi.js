"use strict";
/**
 * Pappers API
 * L\'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d\'API dans les requêtes, en utilisant le paramètre `api_token`.  L\'URL d\'accès à l\'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L\'historique des modifications (changelog) est accessible à l\'url suivante : https://www.pappers.fr/api/changelog
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FicheEntrepriseApi = exports.FicheEntrepriseApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://api.pappers.fr/v2';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var FicheEntrepriseApiApiKeys;
(function (FicheEntrepriseApiApiKeys) {
})(FicheEntrepriseApiApiKeys = exports.FicheEntrepriseApiApiKeys || (exports.FicheEntrepriseApiApiKeys = {}));
class FicheEntrepriseApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[FicheEntrepriseApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Si vous indiquez le SIREN, tous les établissements associés à ce SIREN seront renvoyés dans la clé `etablissements`. Si vous indiquez le SIRET, seul l\'établissement associé sera renvoyé dans la clé `etablissement`.
     * @summary Récupère l\'ensemble des informations disponibles sur une entreprise.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     * @param formatPublicationsBodacc Format attendu pour les publications BODACC. Valeur par défaut : &#x60;\&quot;objet\&quot;&#x60;.
     * @param marques Si vrai, le retour inclura les marques éventuelles de l\&#39;entreprise. Valeur par défaut : &#x60;false&#x60;.
     * @param validiteTvaIntracommunautaire Si vrai, le champ validite_tva_intracommunautaire du retour indiquera si le numéro de tva est valide auprès de la Commission européenne. Valeur par défaut : &#x60;false&#x60;.
     * @param publicationsBodaccBrutes Pappers traite les publications BODACC afin de supprimer les publications périmée. Si vrai, le retour inclura les publications bodacc sans traitement. Valeur par défaut : &#x60;false&#x60;.
     */
    entreprise(apiToken, siren, siret, formatPublicationsBodacc, marques, validiteTvaIntracommunautaire, publicationsBodaccBrutes, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/entreprise';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling entreprise.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            if (siret !== undefined) {
                localVarQueryParameters['siret'] = models_1.ObjectSerializer.serialize(siret, "string");
            }
            if (formatPublicationsBodacc !== undefined) {
                localVarQueryParameters['format_publications_bodacc'] = models_1.ObjectSerializer.serialize(formatPublicationsBodacc, "'objet' | 'texte'");
            }
            if (marques !== undefined) {
                localVarQueryParameters['marques'] = models_1.ObjectSerializer.serialize(marques, "boolean");
            }
            if (validiteTvaIntracommunautaire !== undefined) {
                localVarQueryParameters['validite_tva_intracommunautaire'] = models_1.ObjectSerializer.serialize(validiteTvaIntracommunautaire, "boolean");
            }
            if (publicationsBodaccBrutes !== undefined) {
                localVarQueryParameters['publications_bodacc_brutes'] = models_1.ObjectSerializer.serialize(publicationsBodaccBrutes, "boolean");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EntrepriseFiche");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.FicheEntrepriseApi = FicheEntrepriseApi;
//# sourceMappingURL=ficheEntrepriseApi.js.map