"use strict";
/**
 * Pappers API
 * L\'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d\'API dans les requêtes, en utilisant le paramètre `api_token`.  L\'URL d\'accès à l\'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L\'historique des modifications (changelog) est accessible à l\'url suivante : https://www.pappers.fr/api/changelog
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsApi = exports.DocumentsApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
/* tslint:disable:no-unused-locals */
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://api.pappers.fr/v2';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DocumentsApiApiKeys;
(function (DocumentsApiApiKeys) {
})(DocumentsApiApiKeys = exports.DocumentsApiApiKeys || (exports.DocumentsApiApiKeys = {}));
class DocumentsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DocumentsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
     * @summary Télécharge l\'avis de situation INSEE d\'une entreprise à partir de son SIREN ou SIRET.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     */
    documentAvisSituationInsee(apiToken, siren, siret, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/avis_situation_insee';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentAvisSituationInsee.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            if (siret !== undefined) {
                localVarQueryParameters['siret'] = models_1.ObjectSerializer.serialize(siret, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Vous devez fournir le SIREN. Le document vous sera envoyé au format PDF.  Seules les autorités de contrôle (<a rel=\'noreferrer noopener\' target=\'_blank\' href=\'https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000041578272/\'>article R. 561-57 du Code monétaire et financier en dénombre 18</a>) et les personnes assujetties à la lutte contre le blanchiment des capitaux et le financement du terrorisme (<a rel=\'noreferrer noopener\' target=\'_blank\' href=\'https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000042648575/\'>article L. 561-2 du code monétaire et financier</a>) peuvent accéder à ces informations.  Pour pouvoir utiliser cette route veuillez nous contacter au préalable à api@pappers.fr
     * @summary Télécharge la déclaration des bénéficiaires effectifs d\'une entreprise à partir de son SIREN.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     */
    documentBeneficiairesEffectifs(apiToken, siren, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/declaration_beneficiaires_effectifs';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentBeneficiairesEffectifs.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
     * @summary Télécharge l\'extrait INPI d\'une entreprise à partir de son SIREN ou SIRET.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     */
    documentExtraitInpi(apiToken, siren, siret, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/extrait_inpi';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentExtraitInpi.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            if (siret !== undefined) {
                localVarQueryParameters['siret'] = models_1.ObjectSerializer.serialize(siret, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
     * @summary Télécharge l\'extrait Pappers d\'une entreprise à partir de son SIREN ou SIRET.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     */
    documentExtraitPappers(apiToken, siren, siret, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/extrait_pappers';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentExtraitPappers.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            if (siret !== undefined) {
                localVarQueryParameters['siret'] = models_1.ObjectSerializer.serialize(siret, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
     * @summary Télécharge les derniers statuts disponibles d\'une entreprise à partir de son SIREN ou SIRET.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     */
    documentStatus(apiToken, siren, siret, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/statuts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentStatus.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (siren !== undefined) {
                localVarQueryParameters['siren'] = models_1.ObjectSerializer.serialize(siren, "string");
            }
            if (siret !== undefined) {
                localVarQueryParameters['siret'] = models_1.ObjectSerializer.serialize(siret, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Vous devez fournir le token du document. Le document vous sera envoyé au format PDF ou XLSX.
     * @summary Télécharge un document PDF ou XLSX à partir de son token.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param token Token du document
     */
    documentTelechargement(apiToken, token, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/document/telechargement';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/pdf'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'apiToken' is not null or undefined
            if (apiToken === null || apiToken === undefined) {
                throw new Error('Required parameter apiToken was null or undefined when calling documentTelechargement.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new Error('Required parameter token was null or undefined when calling documentTelechargement.');
            }
            if (apiToken !== undefined) {
                localVarQueryParameters['api_token'] = models_1.ObjectSerializer.serialize(apiToken, "string");
            }
            if (token !== undefined) {
                localVarQueryParameters['token'] = models_1.ObjectSerializer.serialize(token, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.DocumentsApi = DocumentsApi;
//# sourceMappingURL=documentsApi.js.map