=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class EntrepriseFicheAllOf
    attr_accessor :siege

    # Le statut de diffusion de l'entreprise. Non diffusable correspond à une personne physique ayant demandé à être exclue de la diffusion. Aucune information n'est alors disponible. Cette modalité n'est visible que pour les organismes habilités au titre de l'article R. 123-224 ou les administrations.
    attr_accessor :diffusable

    # Sigle de l'entreprise si personne morale.
    attr_accessor :sigle

    # Objet social de l'entreprise.
    attr_accessor :objet_social

    # Capital l'entreprise au format xx xxx €.
    attr_accessor :capital_formate

    # Capital actuel de l'entreprise si variable.
    attr_accessor :capital_actuel_si_variable

    # Devise de capital_formate et capital_actuel_si_variable.
    attr_accessor :devise_capital

    # Numéro RCS de l'entreprise.
    attr_accessor :numero_rcs

    # Date de clôture d'exercice de l'entreprise.
    attr_accessor :date_cloture_exercice

    # Date de clôture d'exercice exceptionnel de l'entreprise.
    attr_accessor :date_cloture_exercice_exceptionnelle

    # Date de clôture d'exercice exceptionnel formatée de l'entreprise.
    attr_accessor :date_cloture_exercice_exceptionnelle_formate

    # Prochaine date de clôture d'exercice de l'entreprise.
    attr_accessor :prochaine_date_cloture_exercice

    # Prochaine date de clôture d'exercice formatée de l'entreprise.
    attr_accessor :prochaine_date_cloture_exercice_formate

    # Vrai si l'entreprise est une entreprise de l'économie sociale et solidaire.
    attr_accessor :economie_sociale_solidaire

    # Durée de la personne morale.
    attr_accessor :duree_personne_morale

    # Date de dernier traitement de l'entreprise.
    attr_accessor :dernier_traitement

    # Dernière mise à jour de la base de donnée sirène au format AAAA-MM-JJ.
    attr_accessor :derniere_mise_a_jour_sirene

    # Dernière mise à jour de la base de donnée RCS au format AAAA-MM-JJ.
    attr_accessor :derniere_mise_a_jour_rcs

    # Statut de l'entreprise au RCS. Peut valoir \"Inscrit\", \"Non inscrit\" ou \"Radié\".
    attr_accessor :statut_rcs

    # Greffe RCS de l'entreprise.
    attr_accessor :greffe

    # Code greffe RCS de l'entreprise.
    attr_accessor :code_greffe

    # Date d'immatriculation de l'entreprise au RCS.
    attr_accessor :date_immatriculation_rcs

    # Date de la première immatriculation de l'entreprise au RCS.
    attr_accessor :date_premiere_immatriculation_rcs

    # Date de début d'activité de l'entreprise.
    attr_accessor :date_debut_activite

    # Date de début d'activité de l'entreprise.
    attr_accessor :date_debut_premiere_activite

    # Date de radiation de l'entreprise au RCS.
    attr_accessor :date_radiation_rcs

    # Numéro de TVA intracommunautaire de l'entreprise.
    attr_accessor :numero_tva_intracommunautaire

    # Présent uniquement si le paramètre validite_tva_intracommunautaire a été mis à vrai.  Si vrai, le numéro de TVA intracommunautaire est valide. Si faux, il est invalide. Si null, la validité n'a pas pu être vérifiée.
    attr_accessor :validite_tva_intracommunautaire

    # Si vrai, l'entreprise est à associé unique (notamment pour les SASU et les EURL).
    attr_accessor :associe_unique

    # Liste des établissements de l'entreprise.
    attr_accessor :etablissements

    # Liste des finances de l'entreprise.
    attr_accessor :finances

    # Liste des représentants de l'entreprise.
    attr_accessor :representants

    # Liste des bénéficiaires effectifs de l'entreprise (si disponibles).
    attr_accessor :beneficiaires_effectifs

    # Liste des actes de l'entreprise.
    attr_accessor :depots_actes

    # Liste des comptes de l'entreprise.
    attr_accessor :comptes

    # Liste des publications au Bodacc de l'entreprise.
    attr_accessor :publications_bodacc

    # Liste des procédures collectives de l'entreprise.
    attr_accessor :procedures_collectives

    # Vrai si l'entreprise a des procédures collectives (en cours ou terminées), faux sinon.
    attr_accessor :procedure_collective_existe

    # Vrai si l'entreprise a des procédures collectives en cours, faux sinon.
    attr_accessor :procedure_collective_en_cours

    attr_accessor :derniers_statuts

    attr_accessor :extrait_immatriculation

    attr_accessor :rnm

    # Liste des marques françaises déposées par l'entreprise. Uniquement présent si le paramètre \"marques\" a été mis à vrai.
    attr_accessor :marques

    attr_accessor :association

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'siege' => :'siege',
        :'diffusable' => :'diffusable',
        :'sigle' => :'sigle',
        :'objet_social' => :'objet_social',
        :'capital_formate' => :'capital_formate',
        :'capital_actuel_si_variable' => :'capital_actuel_si_variable',
        :'devise_capital' => :'devise_capital',
        :'numero_rcs' => :'numero_rcs',
        :'date_cloture_exercice' => :'date_cloture_exercice',
        :'date_cloture_exercice_exceptionnelle' => :'date_cloture_exercice_exceptionnelle',
        :'date_cloture_exercice_exceptionnelle_formate' => :'date_cloture_exercice_exceptionnelle_formate',
        :'prochaine_date_cloture_exercice' => :'prochaine_date_cloture_exercice',
        :'prochaine_date_cloture_exercice_formate' => :'prochaine_date_cloture_exercice_formate',
        :'economie_sociale_solidaire' => :'economie_sociale_solidaire',
        :'duree_personne_morale' => :'duree_personne_morale',
        :'dernier_traitement' => :'dernier_traitement',
        :'derniere_mise_a_jour_sirene' => :'derniere_mise_a_jour_sirene',
        :'derniere_mise_a_jour_rcs' => :'derniere_mise_a_jour_rcs',
        :'statut_rcs' => :'statut_rcs',
        :'greffe' => :'greffe',
        :'code_greffe' => :'code_greffe',
        :'date_immatriculation_rcs' => :'date_immatriculation_rcs',
        :'date_premiere_immatriculation_rcs' => :'date_premiere_immatriculation_rcs',
        :'date_debut_activite' => :'date_debut_activite',
        :'date_debut_premiere_activite' => :'date_debut_premiere_activite',
        :'date_radiation_rcs' => :'date_radiation_rcs',
        :'numero_tva_intracommunautaire' => :'numero_tva_intracommunautaire',
        :'validite_tva_intracommunautaire' => :'validite_tva_intracommunautaire',
        :'associe_unique' => :'associe_unique',
        :'etablissements' => :'etablissements',
        :'finances' => :'finances',
        :'representants' => :'representants',
        :'beneficiaires_effectifs' => :'beneficiaires_effectifs',
        :'depots_actes' => :'depots_actes',
        :'comptes' => :'comptes',
        :'publications_bodacc' => :'publications_bodacc',
        :'procedures_collectives' => :'procedures_collectives',
        :'procedure_collective_existe' => :'procedure_collective_existe',
        :'procedure_collective_en_cours' => :'procedure_collective_en_cours',
        :'derniers_statuts' => :'derniers_statuts',
        :'extrait_immatriculation' => :'extrait_immatriculation',
        :'rnm' => :'rnm',
        :'marques' => :'marques',
        :'association' => :'association'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'siege' => :'EtablissementFiche',
        :'diffusable' => :'Boolean',
        :'sigle' => :'String',
        :'objet_social' => :'String',
        :'capital_formate' => :'String',
        :'capital_actuel_si_variable' => :'String',
        :'devise_capital' => :'String',
        :'numero_rcs' => :'String',
        :'date_cloture_exercice' => :'String',
        :'date_cloture_exercice_exceptionnelle' => :'String',
        :'date_cloture_exercice_exceptionnelle_formate' => :'String',
        :'prochaine_date_cloture_exercice' => :'String',
        :'prochaine_date_cloture_exercice_formate' => :'String',
        :'economie_sociale_solidaire' => :'Boolean',
        :'duree_personne_morale' => :'String',
        :'dernier_traitement' => :'Date',
        :'derniere_mise_a_jour_sirene' => :'Date',
        :'derniere_mise_a_jour_rcs' => :'Date',
        :'statut_rcs' => :'String',
        :'greffe' => :'String',
        :'code_greffe' => :'String',
        :'date_immatriculation_rcs' => :'String',
        :'date_premiere_immatriculation_rcs' => :'String',
        :'date_debut_activite' => :'String',
        :'date_debut_premiere_activite' => :'String',
        :'date_radiation_rcs' => :'String',
        :'numero_tva_intracommunautaire' => :'String',
        :'validite_tva_intracommunautaire' => :'Boolean',
        :'associe_unique' => :'Boolean',
        :'etablissements' => :'Array<EtablissementFiche>',
        :'finances' => :'Array<Object>',
        :'representants' => :'Array<Representant>',
        :'beneficiaires_effectifs' => :'Array<EntrepriseFicheAllOfBeneficiairesEffectifs>',
        :'depots_actes' => :'Array<EntrepriseFicheAllOfDepotsActes>',
        :'comptes' => :'Array<EntrepriseFicheAllOfComptes>',
        :'publications_bodacc' => :'Array<Bodacc>',
        :'procedures_collectives' => :'Array<EntrepriseFicheAllOfProceduresCollectives>',
        :'procedure_collective_existe' => :'Boolean',
        :'procedure_collective_en_cours' => :'Boolean',
        :'derniers_statuts' => :'EntrepriseFicheAllOfDerniersStatuts',
        :'extrait_immatriculation' => :'EntrepriseFicheAllOfExtraitImmatriculation',
        :'rnm' => :'EntrepriseFicheAllOfRnm',
        :'marques' => :'Array<EntrepriseFicheAllOfMarques>',
        :'association' => :'Association'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::EntrepriseFicheAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::EntrepriseFicheAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'siege')
        self.siege = attributes[:'siege']
      end

      if attributes.key?(:'diffusable')
        self.diffusable = attributes[:'diffusable']
      end

      if attributes.key?(:'sigle')
        self.sigle = attributes[:'sigle']
      end

      if attributes.key?(:'objet_social')
        self.objet_social = attributes[:'objet_social']
      end

      if attributes.key?(:'capital_formate')
        self.capital_formate = attributes[:'capital_formate']
      end

      if attributes.key?(:'capital_actuel_si_variable')
        self.capital_actuel_si_variable = attributes[:'capital_actuel_si_variable']
      end

      if attributes.key?(:'devise_capital')
        self.devise_capital = attributes[:'devise_capital']
      end

      if attributes.key?(:'numero_rcs')
        self.numero_rcs = attributes[:'numero_rcs']
      end

      if attributes.key?(:'date_cloture_exercice')
        self.date_cloture_exercice = attributes[:'date_cloture_exercice']
      end

      if attributes.key?(:'date_cloture_exercice_exceptionnelle')
        self.date_cloture_exercice_exceptionnelle = attributes[:'date_cloture_exercice_exceptionnelle']
      end

      if attributes.key?(:'date_cloture_exercice_exceptionnelle_formate')
        self.date_cloture_exercice_exceptionnelle_formate = attributes[:'date_cloture_exercice_exceptionnelle_formate']
      end

      if attributes.key?(:'prochaine_date_cloture_exercice')
        self.prochaine_date_cloture_exercice = attributes[:'prochaine_date_cloture_exercice']
      end

      if attributes.key?(:'prochaine_date_cloture_exercice_formate')
        self.prochaine_date_cloture_exercice_formate = attributes[:'prochaine_date_cloture_exercice_formate']
      end

      if attributes.key?(:'economie_sociale_solidaire')
        self.economie_sociale_solidaire = attributes[:'economie_sociale_solidaire']
      end

      if attributes.key?(:'duree_personne_morale')
        self.duree_personne_morale = attributes[:'duree_personne_morale']
      end

      if attributes.key?(:'dernier_traitement')
        self.dernier_traitement = attributes[:'dernier_traitement']
      end

      if attributes.key?(:'derniere_mise_a_jour_sirene')
        self.derniere_mise_a_jour_sirene = attributes[:'derniere_mise_a_jour_sirene']
      end

      if attributes.key?(:'derniere_mise_a_jour_rcs')
        self.derniere_mise_a_jour_rcs = attributes[:'derniere_mise_a_jour_rcs']
      end

      if attributes.key?(:'statut_rcs')
        self.statut_rcs = attributes[:'statut_rcs']
      end

      if attributes.key?(:'greffe')
        self.greffe = attributes[:'greffe']
      end

      if attributes.key?(:'code_greffe')
        self.code_greffe = attributes[:'code_greffe']
      end

      if attributes.key?(:'date_immatriculation_rcs')
        self.date_immatriculation_rcs = attributes[:'date_immatriculation_rcs']
      end

      if attributes.key?(:'date_premiere_immatriculation_rcs')
        self.date_premiere_immatriculation_rcs = attributes[:'date_premiere_immatriculation_rcs']
      end

      if attributes.key?(:'date_debut_activite')
        self.date_debut_activite = attributes[:'date_debut_activite']
      end

      if attributes.key?(:'date_debut_premiere_activite')
        self.date_debut_premiere_activite = attributes[:'date_debut_premiere_activite']
      end

      if attributes.key?(:'date_radiation_rcs')
        self.date_radiation_rcs = attributes[:'date_radiation_rcs']
      end

      if attributes.key?(:'numero_tva_intracommunautaire')
        self.numero_tva_intracommunautaire = attributes[:'numero_tva_intracommunautaire']
      end

      if attributes.key?(:'validite_tva_intracommunautaire')
        self.validite_tva_intracommunautaire = attributes[:'validite_tva_intracommunautaire']
      end

      if attributes.key?(:'associe_unique')
        self.associe_unique = attributes[:'associe_unique']
      end

      if attributes.key?(:'etablissements')
        if (value = attributes[:'etablissements']).is_a?(Array)
          self.etablissements = value
        end
      end

      if attributes.key?(:'finances')
        if (value = attributes[:'finances']).is_a?(Array)
          self.finances = value
        end
      end

      if attributes.key?(:'representants')
        if (value = attributes[:'representants']).is_a?(Array)
          self.representants = value
        end
      end

      if attributes.key?(:'beneficiaires_effectifs')
        if (value = attributes[:'beneficiaires_effectifs']).is_a?(Array)
          self.beneficiaires_effectifs = value
        end
      end

      if attributes.key?(:'depots_actes')
        if (value = attributes[:'depots_actes']).is_a?(Array)
          self.depots_actes = value
        end
      end

      if attributes.key?(:'comptes')
        if (value = attributes[:'comptes']).is_a?(Array)
          self.comptes = value
        end
      end

      if attributes.key?(:'publications_bodacc')
        if (value = attributes[:'publications_bodacc']).is_a?(Array)
          self.publications_bodacc = value
        end
      end

      if attributes.key?(:'procedures_collectives')
        if (value = attributes[:'procedures_collectives']).is_a?(Array)
          self.procedures_collectives = value
        end
      end

      if attributes.key?(:'procedure_collective_existe')
        self.procedure_collective_existe = attributes[:'procedure_collective_existe']
      end

      if attributes.key?(:'procedure_collective_en_cours')
        self.procedure_collective_en_cours = attributes[:'procedure_collective_en_cours']
      end

      if attributes.key?(:'derniers_statuts')
        self.derniers_statuts = attributes[:'derniers_statuts']
      end

      if attributes.key?(:'extrait_immatriculation')
        self.extrait_immatriculation = attributes[:'extrait_immatriculation']
      end

      if attributes.key?(:'rnm')
        self.rnm = attributes[:'rnm']
      end

      if attributes.key?(:'marques')
        if (value = attributes[:'marques']).is_a?(Array)
          self.marques = value
        end
      end

      if attributes.key?(:'association')
        self.association = attributes[:'association']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          siege == o.siege &&
          diffusable == o.diffusable &&
          sigle == o.sigle &&
          objet_social == o.objet_social &&
          capital_formate == o.capital_formate &&
          capital_actuel_si_variable == o.capital_actuel_si_variable &&
          devise_capital == o.devise_capital &&
          numero_rcs == o.numero_rcs &&
          date_cloture_exercice == o.date_cloture_exercice &&
          date_cloture_exercice_exceptionnelle == o.date_cloture_exercice_exceptionnelle &&
          date_cloture_exercice_exceptionnelle_formate == o.date_cloture_exercice_exceptionnelle_formate &&
          prochaine_date_cloture_exercice == o.prochaine_date_cloture_exercice &&
          prochaine_date_cloture_exercice_formate == o.prochaine_date_cloture_exercice_formate &&
          economie_sociale_solidaire == o.economie_sociale_solidaire &&
          duree_personne_morale == o.duree_personne_morale &&
          dernier_traitement == o.dernier_traitement &&
          derniere_mise_a_jour_sirene == o.derniere_mise_a_jour_sirene &&
          derniere_mise_a_jour_rcs == o.derniere_mise_a_jour_rcs &&
          statut_rcs == o.statut_rcs &&
          greffe == o.greffe &&
          code_greffe == o.code_greffe &&
          date_immatriculation_rcs == o.date_immatriculation_rcs &&
          date_premiere_immatriculation_rcs == o.date_premiere_immatriculation_rcs &&
          date_debut_activite == o.date_debut_activite &&
          date_debut_premiere_activite == o.date_debut_premiere_activite &&
          date_radiation_rcs == o.date_radiation_rcs &&
          numero_tva_intracommunautaire == o.numero_tva_intracommunautaire &&
          validite_tva_intracommunautaire == o.validite_tva_intracommunautaire &&
          associe_unique == o.associe_unique &&
          etablissements == o.etablissements &&
          finances == o.finances &&
          representants == o.representants &&
          beneficiaires_effectifs == o.beneficiaires_effectifs &&
          depots_actes == o.depots_actes &&
          comptes == o.comptes &&
          publications_bodacc == o.publications_bodacc &&
          procedures_collectives == o.procedures_collectives &&
          procedure_collective_existe == o.procedure_collective_existe &&
          procedure_collective_en_cours == o.procedure_collective_en_cours &&
          derniers_statuts == o.derniers_statuts &&
          extrait_immatriculation == o.extrait_immatriculation &&
          rnm == o.rnm &&
          marques == o.marques &&
          association == o.association
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [siege, diffusable, sigle, objet_social, capital_formate, capital_actuel_si_variable, devise_capital, numero_rcs, date_cloture_exercice, date_cloture_exercice_exceptionnelle, date_cloture_exercice_exceptionnelle_formate, prochaine_date_cloture_exercice, prochaine_date_cloture_exercice_formate, economie_sociale_solidaire, duree_personne_morale, dernier_traitement, derniere_mise_a_jour_sirene, derniere_mise_a_jour_rcs, statut_rcs, greffe, code_greffe, date_immatriculation_rcs, date_premiere_immatriculation_rcs, date_debut_activite, date_debut_premiere_activite, date_radiation_rcs, numero_tva_intracommunautaire, validite_tva_intracommunautaire, associe_unique, etablissements, finances, representants, beneficiaires_effectifs, depots_actes, comptes, publications_bodacc, procedures_collectives, procedure_collective_existe, procedure_collective_en_cours, derniers_statuts, extrait_immatriculation, rnm, marques, association].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
