=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Ratios
    # Chiffre d'affaires de l'entreprise.
    attr_accessor :chiffre_affaires

    # Résultat de l'entreprise.
    attr_accessor :resultat

    # Effectif de l'entreprise.
    attr_accessor :effectif

    # Marge brute de l'entreprise.
    attr_accessor :marge_brute

    # Excédent brut d'exploitation (EBITDA) de l'entreprise.
    attr_accessor :excedent_brut_exploitation

    # Résultat d'exploitation (EBIT) de l'entreprise.
    attr_accessor :resultat_exploitation

    # Taux de croissance du chiffre d'affaires (en %) de l'entreprise.
    attr_accessor :taux_croissance_chiffre_affaires

    # Taux de marge brute (en %) de l'entreprise.
    attr_accessor :taux_marge_brute

    # Taux de marge d'EBITDA (en %) de l'entreprise.
    attr_accessor :taux_marge_ebitda

    # Taux de marge opérationnelle (EBIT) (en %) de l'entreprise.
    attr_accessor :taux_marge_operationnelle

    # BFR (Besoin en fonds de roulement) de l'entreprise.
    attr_accessor :bfr

    # BFR exploitation de l'entreprise.
    attr_accessor :bfr_exploitation

    # BFR hors exploitation de l'entreprise.
    attr_accessor :bfr_hors_exploitation

    # BFR (en jours de CA) de l'entreprise.
    attr_accessor :bfr_jours_ca

    # BFR exploitation (en jours de CA) de l'entreprise.
    attr_accessor :bfr_exploitation_jours_ca

    # BFR hors exploitation (en jours de CA) de l'entreprise.
    attr_accessor :bfr_hors_exploitation_jours_ca

    # Délai de paiement clients (en jours) de l'entreprise.
    attr_accessor :delai_paiement_clients_jours

    # Délai de paiement fournisseurs (en jours) de l'entreprise.
    attr_accessor :delai_paiement_fournisseurs_jours

    # Ratio des stocks / CA (en jours) de l'entreprise.
    attr_accessor :ratio_stock_ca_jours

    # Capacité d'autofinancement de l'entreprise.
    attr_accessor :capacite_autofinancement

    # Capacité d'autofinancement / CA (en %) de l'entreprise.
    attr_accessor :capacite_autofinancement_ca

    # Fonds de roulement net global de l'entreprise.
    attr_accessor :fonds_roulement_net_global

    # Couverture du BFR de l'entreprise.
    attr_accessor :couverture_bfr

    # Trésorerie de l'entreprise.
    attr_accessor :tresorerie

    # Dettes financières de l'entreprise.
    attr_accessor :dettes_financieres

    # Capacité de remboursement de l'entreprise.
    attr_accessor :capacite_remboursement

    # Ratio d'endettement (Gearing) de l'entreprise.
    attr_accessor :ratio_endettement

    # Autonomie financière (en %) de l'entreprise.
    attr_accessor :autonomie_financiere

    # Taux de levier (DFN/EBITDA) de l'entreprise.
    attr_accessor :taux_levier

    # Etat des dettes à 1 an au plus de l'entreprise.
    attr_accessor :etat_dettes_1_an_au_plus

    # Liquidité générale de l'entreprise.
    attr_accessor :liquidite_generale

    # Couverture des dettes de l'entreprise.
    attr_accessor :couverture_dettes

    # Marge nette (en %) de l'entreprise.
    attr_accessor :marge_nette

    # Rentabilité sur fonds propres (en %) de l'entreprise.
    attr_accessor :rentabilite_fonds_propres

    # Rentabilité économique (en %) de l'entreprise.
    attr_accessor :rentabilite_economique

    # Valeur ajoutée de l'entreprise.
    attr_accessor :valeur_ajoutee

    # Valeur ajoutée / CA (en %) de l'entreprise.
    attr_accessor :valeur_ajoutee_ca

    # Salaires et charges sociales de l'entreprise.
    attr_accessor :salaires_charges_sociales

    # Salaires / CA (en %) de l'entreprise.
    attr_accessor :salaires_ca

    # Impôts et taxes de l'entreprise.
    attr_accessor :impots_taxes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chiffre_affaires' => :'chiffre_affaires',
        :'resultat' => :'resultat',
        :'effectif' => :'effectif',
        :'marge_brute' => :'marge_brute',
        :'excedent_brut_exploitation' => :'excedent_brut_exploitation',
        :'resultat_exploitation' => :'resultat_exploitation',
        :'taux_croissance_chiffre_affaires' => :'taux_croissance_chiffre_affaires',
        :'taux_marge_brute' => :'taux_marge_brute',
        :'taux_marge_ebitda' => :'taux_marge_EBITDA',
        :'taux_marge_operationnelle' => :'taux_marge_operationnelle',
        :'bfr' => :'BFR',
        :'bfr_exploitation' => :'BFR_exploitation',
        :'bfr_hors_exploitation' => :'BFR_hors_exploitation',
        :'bfr_jours_ca' => :'BFR_jours_CA',
        :'bfr_exploitation_jours_ca' => :'BFR_exploitation_jours_CA',
        :'bfr_hors_exploitation_jours_ca' => :'BFR_hors_exploitation_jours_CA',
        :'delai_paiement_clients_jours' => :'delai_paiement_clients_jours',
        :'delai_paiement_fournisseurs_jours' => :'delai_paiement_fournisseurs_jours',
        :'ratio_stock_ca_jours' => :'ratio_stock_CA_jours',
        :'capacite_autofinancement' => :'capacite_autofinancement',
        :'capacite_autofinancement_ca' => :'capacite_autofinancement_CA',
        :'fonds_roulement_net_global' => :'fonds_roulement_net_global',
        :'couverture_bfr' => :'couverture_BFR',
        :'tresorerie' => :'tresorerie',
        :'dettes_financieres' => :'dettes_financieres',
        :'capacite_remboursement' => :'capacite_remboursement',
        :'ratio_endettement' => :'ratio_endettement',
        :'autonomie_financiere' => :'autonomie_financiere',
        :'taux_levier' => :'taux_levier',
        :'etat_dettes_1_an_au_plus' => :'etat_dettes_1_an_au_plus',
        :'liquidite_generale' => :'liquidite_generale',
        :'couverture_dettes' => :'couverture_dettes',
        :'marge_nette' => :'marge_nette',
        :'rentabilite_fonds_propres' => :'rentabilite_fonds_propres',
        :'rentabilite_economique' => :'rentabilite_economique',
        :'valeur_ajoutee' => :'valeur_ajoutee',
        :'valeur_ajoutee_ca' => :'valeur_ajoutee_CA',
        :'salaires_charges_sociales' => :'salaires_charges_sociales',
        :'salaires_ca' => :'salaires_CA',
        :'impots_taxes' => :'impots_taxes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'chiffre_affaires' => :'Integer',
        :'resultat' => :'Integer',
        :'effectif' => :'Integer',
        :'marge_brute' => :'Integer',
        :'excedent_brut_exploitation' => :'Integer',
        :'resultat_exploitation' => :'Integer',
        :'taux_croissance_chiffre_affaires' => :'Integer',
        :'taux_marge_brute' => :'Integer',
        :'taux_marge_ebitda' => :'Integer',
        :'taux_marge_operationnelle' => :'Integer',
        :'bfr' => :'Integer',
        :'bfr_exploitation' => :'Integer',
        :'bfr_hors_exploitation' => :'Integer',
        :'bfr_jours_ca' => :'Integer',
        :'bfr_exploitation_jours_ca' => :'Integer',
        :'bfr_hors_exploitation_jours_ca' => :'Integer',
        :'delai_paiement_clients_jours' => :'Integer',
        :'delai_paiement_fournisseurs_jours' => :'Integer',
        :'ratio_stock_ca_jours' => :'Integer',
        :'capacite_autofinancement' => :'Integer',
        :'capacite_autofinancement_ca' => :'Integer',
        :'fonds_roulement_net_global' => :'Integer',
        :'couverture_bfr' => :'Integer',
        :'tresorerie' => :'Integer',
        :'dettes_financieres' => :'Integer',
        :'capacite_remboursement' => :'Integer',
        :'ratio_endettement' => :'Integer',
        :'autonomie_financiere' => :'Integer',
        :'taux_levier' => :'Integer',
        :'etat_dettes_1_an_au_plus' => :'Integer',
        :'liquidite_generale' => :'Integer',
        :'couverture_dettes' => :'Integer',
        :'marge_nette' => :'Integer',
        :'rentabilite_fonds_propres' => :'Integer',
        :'rentabilite_economique' => :'Integer',
        :'valeur_ajoutee' => :'Integer',
        :'valeur_ajoutee_ca' => :'Integer',
        :'salaires_charges_sociales' => :'Integer',
        :'salaires_ca' => :'Integer',
        :'impots_taxes' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Ratios` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Ratios`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'chiffre_affaires')
        self.chiffre_affaires = attributes[:'chiffre_affaires']
      end

      if attributes.key?(:'resultat')
        self.resultat = attributes[:'resultat']
      end

      if attributes.key?(:'effectif')
        self.effectif = attributes[:'effectif']
      end

      if attributes.key?(:'marge_brute')
        self.marge_brute = attributes[:'marge_brute']
      end

      if attributes.key?(:'excedent_brut_exploitation')
        self.excedent_brut_exploitation = attributes[:'excedent_brut_exploitation']
      end

      if attributes.key?(:'resultat_exploitation')
        self.resultat_exploitation = attributes[:'resultat_exploitation']
      end

      if attributes.key?(:'taux_croissance_chiffre_affaires')
        self.taux_croissance_chiffre_affaires = attributes[:'taux_croissance_chiffre_affaires']
      end

      if attributes.key?(:'taux_marge_brute')
        self.taux_marge_brute = attributes[:'taux_marge_brute']
      end

      if attributes.key?(:'taux_marge_ebitda')
        self.taux_marge_ebitda = attributes[:'taux_marge_ebitda']
      end

      if attributes.key?(:'taux_marge_operationnelle')
        self.taux_marge_operationnelle = attributes[:'taux_marge_operationnelle']
      end

      if attributes.key?(:'bfr')
        self.bfr = attributes[:'bfr']
      end

      if attributes.key?(:'bfr_exploitation')
        self.bfr_exploitation = attributes[:'bfr_exploitation']
      end

      if attributes.key?(:'bfr_hors_exploitation')
        self.bfr_hors_exploitation = attributes[:'bfr_hors_exploitation']
      end

      if attributes.key?(:'bfr_jours_ca')
        self.bfr_jours_ca = attributes[:'bfr_jours_ca']
      end

      if attributes.key?(:'bfr_exploitation_jours_ca')
        self.bfr_exploitation_jours_ca = attributes[:'bfr_exploitation_jours_ca']
      end

      if attributes.key?(:'bfr_hors_exploitation_jours_ca')
        self.bfr_hors_exploitation_jours_ca = attributes[:'bfr_hors_exploitation_jours_ca']
      end

      if attributes.key?(:'delai_paiement_clients_jours')
        self.delai_paiement_clients_jours = attributes[:'delai_paiement_clients_jours']
      end

      if attributes.key?(:'delai_paiement_fournisseurs_jours')
        self.delai_paiement_fournisseurs_jours = attributes[:'delai_paiement_fournisseurs_jours']
      end

      if attributes.key?(:'ratio_stock_ca_jours')
        self.ratio_stock_ca_jours = attributes[:'ratio_stock_ca_jours']
      end

      if attributes.key?(:'capacite_autofinancement')
        self.capacite_autofinancement = attributes[:'capacite_autofinancement']
      end

      if attributes.key?(:'capacite_autofinancement_ca')
        self.capacite_autofinancement_ca = attributes[:'capacite_autofinancement_ca']
      end

      if attributes.key?(:'fonds_roulement_net_global')
        self.fonds_roulement_net_global = attributes[:'fonds_roulement_net_global']
      end

      if attributes.key?(:'couverture_bfr')
        self.couverture_bfr = attributes[:'couverture_bfr']
      end

      if attributes.key?(:'tresorerie')
        self.tresorerie = attributes[:'tresorerie']
      end

      if attributes.key?(:'dettes_financieres')
        self.dettes_financieres = attributes[:'dettes_financieres']
      end

      if attributes.key?(:'capacite_remboursement')
        self.capacite_remboursement = attributes[:'capacite_remboursement']
      end

      if attributes.key?(:'ratio_endettement')
        self.ratio_endettement = attributes[:'ratio_endettement']
      end

      if attributes.key?(:'autonomie_financiere')
        self.autonomie_financiere = attributes[:'autonomie_financiere']
      end

      if attributes.key?(:'taux_levier')
        self.taux_levier = attributes[:'taux_levier']
      end

      if attributes.key?(:'etat_dettes_1_an_au_plus')
        self.etat_dettes_1_an_au_plus = attributes[:'etat_dettes_1_an_au_plus']
      end

      if attributes.key?(:'liquidite_generale')
        self.liquidite_generale = attributes[:'liquidite_generale']
      end

      if attributes.key?(:'couverture_dettes')
        self.couverture_dettes = attributes[:'couverture_dettes']
      end

      if attributes.key?(:'marge_nette')
        self.marge_nette = attributes[:'marge_nette']
      end

      if attributes.key?(:'rentabilite_fonds_propres')
        self.rentabilite_fonds_propres = attributes[:'rentabilite_fonds_propres']
      end

      if attributes.key?(:'rentabilite_economique')
        self.rentabilite_economique = attributes[:'rentabilite_economique']
      end

      if attributes.key?(:'valeur_ajoutee')
        self.valeur_ajoutee = attributes[:'valeur_ajoutee']
      end

      if attributes.key?(:'valeur_ajoutee_ca')
        self.valeur_ajoutee_ca = attributes[:'valeur_ajoutee_ca']
      end

      if attributes.key?(:'salaires_charges_sociales')
        self.salaires_charges_sociales = attributes[:'salaires_charges_sociales']
      end

      if attributes.key?(:'salaires_ca')
        self.salaires_ca = attributes[:'salaires_ca']
      end

      if attributes.key?(:'impots_taxes')
        self.impots_taxes = attributes[:'impots_taxes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chiffre_affaires == o.chiffre_affaires &&
          resultat == o.resultat &&
          effectif == o.effectif &&
          marge_brute == o.marge_brute &&
          excedent_brut_exploitation == o.excedent_brut_exploitation &&
          resultat_exploitation == o.resultat_exploitation &&
          taux_croissance_chiffre_affaires == o.taux_croissance_chiffre_affaires &&
          taux_marge_brute == o.taux_marge_brute &&
          taux_marge_ebitda == o.taux_marge_ebitda &&
          taux_marge_operationnelle == o.taux_marge_operationnelle &&
          bfr == o.bfr &&
          bfr_exploitation == o.bfr_exploitation &&
          bfr_hors_exploitation == o.bfr_hors_exploitation &&
          bfr_jours_ca == o.bfr_jours_ca &&
          bfr_exploitation_jours_ca == o.bfr_exploitation_jours_ca &&
          bfr_hors_exploitation_jours_ca == o.bfr_hors_exploitation_jours_ca &&
          delai_paiement_clients_jours == o.delai_paiement_clients_jours &&
          delai_paiement_fournisseurs_jours == o.delai_paiement_fournisseurs_jours &&
          ratio_stock_ca_jours == o.ratio_stock_ca_jours &&
          capacite_autofinancement == o.capacite_autofinancement &&
          capacite_autofinancement_ca == o.capacite_autofinancement_ca &&
          fonds_roulement_net_global == o.fonds_roulement_net_global &&
          couverture_bfr == o.couverture_bfr &&
          tresorerie == o.tresorerie &&
          dettes_financieres == o.dettes_financieres &&
          capacite_remboursement == o.capacite_remboursement &&
          ratio_endettement == o.ratio_endettement &&
          autonomie_financiere == o.autonomie_financiere &&
          taux_levier == o.taux_levier &&
          etat_dettes_1_an_au_plus == o.etat_dettes_1_an_au_plus &&
          liquidite_generale == o.liquidite_generale &&
          couverture_dettes == o.couverture_dettes &&
          marge_nette == o.marge_nette &&
          rentabilite_fonds_propres == o.rentabilite_fonds_propres &&
          rentabilite_economique == o.rentabilite_economique &&
          valeur_ajoutee == o.valeur_ajoutee &&
          valeur_ajoutee_ca == o.valeur_ajoutee_ca &&
          salaires_charges_sociales == o.salaires_charges_sociales &&
          salaires_ca == o.salaires_ca &&
          impots_taxes == o.impots_taxes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [chiffre_affaires, resultat, effectif, marge_brute, excedent_brut_exploitation, resultat_exploitation, taux_croissance_chiffre_affaires, taux_marge_brute, taux_marge_ebitda, taux_marge_operationnelle, bfr, bfr_exploitation, bfr_hors_exploitation, bfr_jours_ca, bfr_exploitation_jours_ca, bfr_hors_exploitation_jours_ca, delai_paiement_clients_jours, delai_paiement_fournisseurs_jours, ratio_stock_ca_jours, capacite_autofinancement, capacite_autofinancement_ca, fonds_roulement_net_global, couverture_bfr, tresorerie, dettes_financieres, capacite_remboursement, ratio_endettement, autonomie_financiere, taux_levier, etat_dettes_1_an_au_plus, liquidite_generale, couverture_dettes, marge_nette, rentabilite_fonds_propres, rentabilite_economique, valeur_ajoutee, valeur_ajoutee_ca, salaires_charges_sociales, salaires_ca, impots_taxes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
