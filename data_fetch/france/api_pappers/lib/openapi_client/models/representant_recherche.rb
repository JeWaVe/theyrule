=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class RepresentantRecherche
    # Qualité du représentant.
    attr_accessor :qualite

    # Vrai si le représentant est une personne morale, faux si personne physique.
    attr_accessor :personne_morale

    # Date de prise de poste du représentant.
    attr_accessor :date_prise_de_poste

    # Sexe supposé du dirigeant si personne physique. F pour féminin, M pour masculin. Ce champ est estimé à partir du prénom du dirigeant.
    attr_accessor :sexe

    # Nom du représentant.
    attr_accessor :nom

    # Prénoms du représentant.
    attr_accessor :prenom

    # Prénom usuel du représentant.
    attr_accessor :prenom_usuel

    # Nom complet du représentant.
    attr_accessor :nom_complet

    # Date de naissance du représentant.
    attr_accessor :date_de_naissance

    # Date de naissance formatée du représentant.
    attr_accessor :date_de_naissance_formate

    # Age du représentant.
    attr_accessor :age

    # Nationalité du représentant.
    attr_accessor :nationalite

    # Code nationalité du représentant
    attr_accessor :code_nationalite

    # Ville de naissance du représentant.
    attr_accessor :ville_de_naissance

    # Pays de naissance du représentant.
    attr_accessor :pays_de_naissance

    # Code du pays de naissance du représentant.
    attr_accessor :code_pays_de_naissance

    # Première ligne de l'adresse du représentant.
    attr_accessor :adresse_ligne_1

    # Deuxième ligne de l'adresse du représentant.
    attr_accessor :adresse_ligne_2

    # Troisième ligne de l'adresse du représentant.
    attr_accessor :adresse_ligne_3

    # Code postal du représentant.
    attr_accessor :code_postal

    # Ville du représentant.
    attr_accessor :ville

    # Pays du représentant.
    attr_accessor :pays

    # Code du pays du représentant
    attr_accessor :code_pays

    # Vaut vrai si le représentant est toujours à son poste.
    attr_accessor :actuel

    # Date de départ de poste dans le cas où le représentant n'est plus un représentant actuel, au format AAAA-MM-JJ.
    attr_accessor :date_depart_de_poste

    # Forme juridique du représentant dans le cas d'une personne morale.
    attr_accessor :forme_juridique

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'qualite' => :'qualite',
        :'personne_morale' => :'personne_morale',
        :'date_prise_de_poste' => :'date_prise_de_poste',
        :'sexe' => :'sexe',
        :'nom' => :'nom',
        :'prenom' => :'prenom',
        :'prenom_usuel' => :'prenom_usuel',
        :'nom_complet' => :'nom_complet',
        :'date_de_naissance' => :'date_de_naissance',
        :'date_de_naissance_formate' => :'date_de_naissance_formate',
        :'age' => :'age',
        :'nationalite' => :'nationalite',
        :'code_nationalite' => :'code_nationalite',
        :'ville_de_naissance' => :'ville_de_naissance',
        :'pays_de_naissance' => :'pays_de_naissance',
        :'code_pays_de_naissance' => :'code_pays_de_naissance',
        :'adresse_ligne_1' => :'adresse_ligne_1',
        :'adresse_ligne_2' => :'adresse_ligne_2',
        :'adresse_ligne_3' => :'adresse_ligne_3',
        :'code_postal' => :'code_postal',
        :'ville' => :'ville',
        :'pays' => :'pays',
        :'code_pays' => :'code_pays',
        :'actuel' => :'actuel',
        :'date_depart_de_poste' => :'date_depart_de_poste',
        :'forme_juridique' => :'forme_juridique'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'qualite' => :'String',
        :'personne_morale' => :'Boolean',
        :'date_prise_de_poste' => :'String',
        :'sexe' => :'String',
        :'nom' => :'String',
        :'prenom' => :'String',
        :'prenom_usuel' => :'String',
        :'nom_complet' => :'String',
        :'date_de_naissance' => :'String',
        :'date_de_naissance_formate' => :'String',
        :'age' => :'Integer',
        :'nationalite' => :'String',
        :'code_nationalite' => :'String',
        :'ville_de_naissance' => :'String',
        :'pays_de_naissance' => :'String',
        :'code_pays_de_naissance' => :'String',
        :'adresse_ligne_1' => :'String',
        :'adresse_ligne_2' => :'String',
        :'adresse_ligne_3' => :'String',
        :'code_postal' => :'String',
        :'ville' => :'String',
        :'pays' => :'String',
        :'code_pays' => :'String',
        :'actuel' => :'Boolean',
        :'date_depart_de_poste' => :'String',
        :'forme_juridique' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Representant',
      :'RepresentantRechercheAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::RepresentantRecherche` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::RepresentantRecherche`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'qualite')
        self.qualite = attributes[:'qualite']
      end

      if attributes.key?(:'personne_morale')
        self.personne_morale = attributes[:'personne_morale']
      end

      if attributes.key?(:'date_prise_de_poste')
        self.date_prise_de_poste = attributes[:'date_prise_de_poste']
      end

      if attributes.key?(:'sexe')
        self.sexe = attributes[:'sexe']
      end

      if attributes.key?(:'nom')
        self.nom = attributes[:'nom']
      end

      if attributes.key?(:'prenom')
        self.prenom = attributes[:'prenom']
      end

      if attributes.key?(:'prenom_usuel')
        self.prenom_usuel = attributes[:'prenom_usuel']
      end

      if attributes.key?(:'nom_complet')
        self.nom_complet = attributes[:'nom_complet']
      end

      if attributes.key?(:'date_de_naissance')
        self.date_de_naissance = attributes[:'date_de_naissance']
      end

      if attributes.key?(:'date_de_naissance_formate')
        self.date_de_naissance_formate = attributes[:'date_de_naissance_formate']
      end

      if attributes.key?(:'age')
        self.age = attributes[:'age']
      end

      if attributes.key?(:'nationalite')
        self.nationalite = attributes[:'nationalite']
      end

      if attributes.key?(:'code_nationalite')
        self.code_nationalite = attributes[:'code_nationalite']
      end

      if attributes.key?(:'ville_de_naissance')
        self.ville_de_naissance = attributes[:'ville_de_naissance']
      end

      if attributes.key?(:'pays_de_naissance')
        self.pays_de_naissance = attributes[:'pays_de_naissance']
      end

      if attributes.key?(:'code_pays_de_naissance')
        self.code_pays_de_naissance = attributes[:'code_pays_de_naissance']
      end

      if attributes.key?(:'adresse_ligne_1')
        self.adresse_ligne_1 = attributes[:'adresse_ligne_1']
      end

      if attributes.key?(:'adresse_ligne_2')
        self.adresse_ligne_2 = attributes[:'adresse_ligne_2']
      end

      if attributes.key?(:'adresse_ligne_3')
        self.adresse_ligne_3 = attributes[:'adresse_ligne_3']
      end

      if attributes.key?(:'code_postal')
        self.code_postal = attributes[:'code_postal']
      end

      if attributes.key?(:'ville')
        self.ville = attributes[:'ville']
      end

      if attributes.key?(:'pays')
        self.pays = attributes[:'pays']
      end

      if attributes.key?(:'code_pays')
        self.code_pays = attributes[:'code_pays']
      end

      if attributes.key?(:'actuel')
        self.actuel = attributes[:'actuel']
      end

      if attributes.key?(:'date_depart_de_poste')
        self.date_depart_de_poste = attributes[:'date_depart_de_poste']
      end

      if attributes.key?(:'forme_juridique')
        self.forme_juridique = attributes[:'forme_juridique']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          qualite == o.qualite &&
          personne_morale == o.personne_morale &&
          date_prise_de_poste == o.date_prise_de_poste &&
          sexe == o.sexe &&
          nom == o.nom &&
          prenom == o.prenom &&
          prenom_usuel == o.prenom_usuel &&
          nom_complet == o.nom_complet &&
          date_de_naissance == o.date_de_naissance &&
          date_de_naissance_formate == o.date_de_naissance_formate &&
          age == o.age &&
          nationalite == o.nationalite &&
          code_nationalite == o.code_nationalite &&
          ville_de_naissance == o.ville_de_naissance &&
          pays_de_naissance == o.pays_de_naissance &&
          code_pays_de_naissance == o.code_pays_de_naissance &&
          adresse_ligne_1 == o.adresse_ligne_1 &&
          adresse_ligne_2 == o.adresse_ligne_2 &&
          adresse_ligne_3 == o.adresse_ligne_3 &&
          code_postal == o.code_postal &&
          ville == o.ville &&
          pays == o.pays &&
          code_pays == o.code_pays &&
          actuel == o.actuel &&
          date_depart_de_poste == o.date_depart_de_poste &&
          forme_juridique == o.forme_juridique
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [qualite, personne_morale, date_prise_de_poste, sexe, nom, prenom, prenom_usuel, nom_complet, date_de_naissance, date_de_naissance_formate, age, nationalite, code_nationalite, ville_de_naissance, pays_de_naissance, code_pays_de_naissance, adresse_ligne_1, adresse_ligne_2, adresse_ligne_3, code_postal, ville, pays, code_pays, actuel, date_depart_de_poste, forme_juridique].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
