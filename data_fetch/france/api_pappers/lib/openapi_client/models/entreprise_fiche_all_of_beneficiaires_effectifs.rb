=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class EntrepriseFicheAllOfBeneficiairesEffectifs
    # Date de génération des bénéficiaires effectifs, au format AAAA-MM-JJ.
    attr_accessor :date_greffe

    # Type du bénéficiaire effectif
    attr_accessor :type

    # Nom du bénéficiaire effectif.
    attr_accessor :nom

    # Nom d'usage du bénéficiaire effectif.
    attr_accessor :nom_usage

    # Prénom du bénéficiaire effectif.
    attr_accessor :prenom

    attr_accessor :pseudonyme

    # Mois et année de naissance du bénéficiaire effectif, au format MM/AAAA.
    attr_accessor :date_de_naissance_formatee

    # Date de naissance complète du bénéficiaire effectif, au format JJ/MM/AAAA.
    attr_accessor :date_de_naissance_complete_formatee

    # Nationalité du bénéficiaire effectif.
    attr_accessor :nationalite

    # Code de la nationalité du bénéficiaire effectif.
    attr_accessor :code_nationalite

    # Ville de naissance du bénéficiaire effectif.
    attr_accessor :ville_de_naissance

    # Pays de naissance du bénéficiaire effectif.
    attr_accessor :pays_de_naissance

    # Code du pays de naissance du bénéficiaire effectif.
    attr_accessor :code_pays_de_naissance

    # Première ligne de l'adresse du bénéficiaire effectif.
    attr_accessor :adresse_ligne_1

    # Deuxième ligne de l'adresse du bénéficiaire effectif.
    attr_accessor :adresse_ligne_2

    # Troisième ligne de l'adresse du bénéficiaire effectif.
    attr_accessor :adresse_ligne_3

    # Code postal du bénéficiaire effectif.
    attr_accessor :code_postal

    # Ville du bénéficiaire effectif.
    attr_accessor :ville

    # Pays du bénéficiaire effectif.
    attr_accessor :pays

    # Code du pays du bénéficiaire effectif.
    attr_accessor :code_pays

    # Parts détenues par le bénéficiaire effectif, en pourcentage des parts totales.
    attr_accessor :pourcentage_parts

    # Parts détenues de façon directe par le bénéficiaire effectif, en pourcentage des parts totales.
    attr_accessor :pourcentage_parts_directes

    # Parts détenues de façon indirecte par le bénéficiaire effectif, en pourcentage des parts totales.
    attr_accessor :pourcentage_parts_indirectes

    # Parts dont le bénéficiaire effectif a vocation à devenir titulaire par l'effet d'un acte juridique, en pourcentage des parts totales.
    attr_accessor :pourcentage_parts_vocation_titulaire

    attr_accessor :details_parts_directes

    attr_accessor :details_parts_indirectes

    attr_accessor :details_parts_vocation_titulaire

    # Droits de vote détenus par le bénéficiaire effectif, en pourcentage des droits de vote totaux.
    attr_accessor :pourcentage_votes

    # Droits de vote détenus de façon directe par le bénéficiaire effectif, en pourcentage des droits de vote totaux.
    attr_accessor :pourcentage_votes_directs

    # Droits de vote détenus de façon indirecte par le bénéficiaire effectif, en pourcentage des droits de vote totaux.
    attr_accessor :pourcentage_votes_indirect

    attr_accessor :details_votes_directs

    attr_accessor :details_votes_indirects

    attr_accessor :details_societe_de_gestion

    # Vaut vrai pour les moyens de contrôle sur les organes d'administration, de gestion, de direction ou de surveillance de la personne morale autre que le pouvoir de nommer ou de révoquer la majorité des membres.
    attr_accessor :detention_pouvoir_decision_ag

    # Vaut vrai si le moyen de contrôle est le pouvoir de nommer ou de révoquer la majorité des membres des organes d'administration, de gestion, de direction ou de surveillance de la personne morale.
    attr_accessor :detention_pouvoir_nom_membre_conseil_administration

    # Vaut vrai s'il existe d'autres moyens de contrôle.
    attr_accessor :detention_autres_moyens_controle

    # Vaut vrai dans le cas où le bénéficiaire effectif a été défini comme le représentant légal par défaut.
    attr_accessor :beneficiaire_representant_legal

    # Vaut vrai dans le cas où le bénéficiaire effectif est le représentant légal du placement collectif (cas où le placement collectif n'a pas délégué sa gestion à une société de gestion).
    attr_accessor :representant_legal_placement_sans_gestion_delegation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date_greffe' => :'date_greffe',
        :'type' => :'type',
        :'nom' => :'nom',
        :'nom_usage' => :'nom_usage',
        :'prenom' => :'prenom',
        :'pseudonyme' => :'pseudonyme',
        :'date_de_naissance_formatee' => :'date_de_naissance_formatee',
        :'date_de_naissance_complete_formatee' => :'date_de_naissance_complete_formatee',
        :'nationalite' => :'nationalite',
        :'code_nationalite' => :'code_nationalite',
        :'ville_de_naissance' => :'ville_de_naissance',
        :'pays_de_naissance' => :'pays_de_naissance',
        :'code_pays_de_naissance' => :'code_pays_de_naissance',
        :'adresse_ligne_1' => :'adresse_ligne_1',
        :'adresse_ligne_2' => :'adresse_ligne_2',
        :'adresse_ligne_3' => :'adresse_ligne_3',
        :'code_postal' => :'code_postal',
        :'ville' => :'ville',
        :'pays' => :'pays',
        :'code_pays' => :'code_pays',
        :'pourcentage_parts' => :'pourcentage_parts',
        :'pourcentage_parts_directes' => :'pourcentage_parts_directes',
        :'pourcentage_parts_indirectes' => :'pourcentage_parts_indirectes',
        :'pourcentage_parts_vocation_titulaire' => :'pourcentage_parts_vocation_titulaire',
        :'details_parts_directes' => :'details_parts_directes',
        :'details_parts_indirectes' => :'details_parts_indirectes',
        :'details_parts_vocation_titulaire' => :'details_parts_vocation_titulaire',
        :'pourcentage_votes' => :'pourcentage_votes',
        :'pourcentage_votes_directs' => :'pourcentage_votes_directs',
        :'pourcentage_votes_indirect' => :'pourcentage_votes_indirect',
        :'details_votes_directs' => :'details_votes_directs',
        :'details_votes_indirects' => :'details_votes_indirects',
        :'details_societe_de_gestion' => :'details_societe_de_gestion',
        :'detention_pouvoir_decision_ag' => :'detention_pouvoir_decision_ag',
        :'detention_pouvoir_nom_membre_conseil_administration' => :'detention_pouvoir_nom_membre_conseil_administration',
        :'detention_autres_moyens_controle' => :'detention_autres_moyens_controle',
        :'beneficiaire_representant_legal' => :'beneficiaire_representant_legal',
        :'representant_legal_placement_sans_gestion_delegation' => :'representant_legal_placement_sans_gestion_delegation'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'date_greffe' => :'Date',
        :'type' => :'String',
        :'nom' => :'String',
        :'nom_usage' => :'String',
        :'prenom' => :'String',
        :'pseudonyme' => :'String',
        :'date_de_naissance_formatee' => :'String',
        :'date_de_naissance_complete_formatee' => :'Date',
        :'nationalite' => :'String',
        :'code_nationalite' => :'String',
        :'ville_de_naissance' => :'String',
        :'pays_de_naissance' => :'String',
        :'code_pays_de_naissance' => :'String',
        :'adresse_ligne_1' => :'String',
        :'adresse_ligne_2' => :'String',
        :'adresse_ligne_3' => :'String',
        :'code_postal' => :'String',
        :'ville' => :'String',
        :'pays' => :'String',
        :'code_pays' => :'String',
        :'pourcentage_parts' => :'Float',
        :'pourcentage_parts_directes' => :'Float',
        :'pourcentage_parts_indirectes' => :'Float',
        :'pourcentage_parts_vocation_titulaire' => :'Float',
        :'details_parts_directes' => :'EntrepriseFicheAllOfDetailsPartsDirectes',
        :'details_parts_indirectes' => :'EntrepriseFicheAllOfDetailsPartsIndirectes',
        :'details_parts_vocation_titulaire' => :'EntrepriseFicheAllOfDetailsPartsVocationTitulaire',
        :'pourcentage_votes' => :'Float',
        :'pourcentage_votes_directs' => :'Float',
        :'pourcentage_votes_indirect' => :'Float',
        :'details_votes_directs' => :'EntrepriseFicheAllOfDetailsVotesDirects',
        :'details_votes_indirects' => :'EntrepriseFicheAllOfDetailsVotesIndirects',
        :'details_societe_de_gestion' => :'EntrepriseFicheAllOfDetailsSocieteDeGestion',
        :'detention_pouvoir_decision_ag' => :'Boolean',
        :'detention_pouvoir_nom_membre_conseil_administration' => :'Boolean',
        :'detention_autres_moyens_controle' => :'Boolean',
        :'beneficiaire_representant_legal' => :'Boolean',
        :'representant_legal_placement_sans_gestion_delegation' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::EntrepriseFicheAllOfBeneficiairesEffectifs` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::EntrepriseFicheAllOfBeneficiairesEffectifs`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'date_greffe')
        self.date_greffe = attributes[:'date_greffe']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'nom')
        self.nom = attributes[:'nom']
      end

      if attributes.key?(:'nom_usage')
        self.nom_usage = attributes[:'nom_usage']
      end

      if attributes.key?(:'prenom')
        self.prenom = attributes[:'prenom']
      end

      if attributes.key?(:'pseudonyme')
        self.pseudonyme = attributes[:'pseudonyme']
      end

      if attributes.key?(:'date_de_naissance_formatee')
        self.date_de_naissance_formatee = attributes[:'date_de_naissance_formatee']
      end

      if attributes.key?(:'date_de_naissance_complete_formatee')
        self.date_de_naissance_complete_formatee = attributes[:'date_de_naissance_complete_formatee']
      end

      if attributes.key?(:'nationalite')
        self.nationalite = attributes[:'nationalite']
      end

      if attributes.key?(:'code_nationalite')
        self.code_nationalite = attributes[:'code_nationalite']
      end

      if attributes.key?(:'ville_de_naissance')
        self.ville_de_naissance = attributes[:'ville_de_naissance']
      end

      if attributes.key?(:'pays_de_naissance')
        self.pays_de_naissance = attributes[:'pays_de_naissance']
      end

      if attributes.key?(:'code_pays_de_naissance')
        self.code_pays_de_naissance = attributes[:'code_pays_de_naissance']
      end

      if attributes.key?(:'adresse_ligne_1')
        self.adresse_ligne_1 = attributes[:'adresse_ligne_1']
      end

      if attributes.key?(:'adresse_ligne_2')
        self.adresse_ligne_2 = attributes[:'adresse_ligne_2']
      end

      if attributes.key?(:'adresse_ligne_3')
        self.adresse_ligne_3 = attributes[:'adresse_ligne_3']
      end

      if attributes.key?(:'code_postal')
        self.code_postal = attributes[:'code_postal']
      end

      if attributes.key?(:'ville')
        self.ville = attributes[:'ville']
      end

      if attributes.key?(:'pays')
        self.pays = attributes[:'pays']
      end

      if attributes.key?(:'code_pays')
        self.code_pays = attributes[:'code_pays']
      end

      if attributes.key?(:'pourcentage_parts')
        self.pourcentage_parts = attributes[:'pourcentage_parts']
      end

      if attributes.key?(:'pourcentage_parts_directes')
        self.pourcentage_parts_directes = attributes[:'pourcentage_parts_directes']
      end

      if attributes.key?(:'pourcentage_parts_indirectes')
        self.pourcentage_parts_indirectes = attributes[:'pourcentage_parts_indirectes']
      end

      if attributes.key?(:'pourcentage_parts_vocation_titulaire')
        self.pourcentage_parts_vocation_titulaire = attributes[:'pourcentage_parts_vocation_titulaire']
      end

      if attributes.key?(:'details_parts_directes')
        self.details_parts_directes = attributes[:'details_parts_directes']
      end

      if attributes.key?(:'details_parts_indirectes')
        self.details_parts_indirectes = attributes[:'details_parts_indirectes']
      end

      if attributes.key?(:'details_parts_vocation_titulaire')
        self.details_parts_vocation_titulaire = attributes[:'details_parts_vocation_titulaire']
      end

      if attributes.key?(:'pourcentage_votes')
        self.pourcentage_votes = attributes[:'pourcentage_votes']
      end

      if attributes.key?(:'pourcentage_votes_directs')
        self.pourcentage_votes_directs = attributes[:'pourcentage_votes_directs']
      end

      if attributes.key?(:'pourcentage_votes_indirect')
        self.pourcentage_votes_indirect = attributes[:'pourcentage_votes_indirect']
      end

      if attributes.key?(:'details_votes_directs')
        self.details_votes_directs = attributes[:'details_votes_directs']
      end

      if attributes.key?(:'details_votes_indirects')
        self.details_votes_indirects = attributes[:'details_votes_indirects']
      end

      if attributes.key?(:'details_societe_de_gestion')
        self.details_societe_de_gestion = attributes[:'details_societe_de_gestion']
      end

      if attributes.key?(:'detention_pouvoir_decision_ag')
        self.detention_pouvoir_decision_ag = attributes[:'detention_pouvoir_decision_ag']
      end

      if attributes.key?(:'detention_pouvoir_nom_membre_conseil_administration')
        self.detention_pouvoir_nom_membre_conseil_administration = attributes[:'detention_pouvoir_nom_membre_conseil_administration']
      end

      if attributes.key?(:'detention_autres_moyens_controle')
        self.detention_autres_moyens_controle = attributes[:'detention_autres_moyens_controle']
      end

      if attributes.key?(:'beneficiaire_representant_legal')
        self.beneficiaire_representant_legal = attributes[:'beneficiaire_representant_legal']
      end

      if attributes.key?(:'representant_legal_placement_sans_gestion_delegation')
        self.representant_legal_placement_sans_gestion_delegation = attributes[:'representant_legal_placement_sans_gestion_delegation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date_greffe == o.date_greffe &&
          type == o.type &&
          nom == o.nom &&
          nom_usage == o.nom_usage &&
          prenom == o.prenom &&
          pseudonyme == o.pseudonyme &&
          date_de_naissance_formatee == o.date_de_naissance_formatee &&
          date_de_naissance_complete_formatee == o.date_de_naissance_complete_formatee &&
          nationalite == o.nationalite &&
          code_nationalite == o.code_nationalite &&
          ville_de_naissance == o.ville_de_naissance &&
          pays_de_naissance == o.pays_de_naissance &&
          code_pays_de_naissance == o.code_pays_de_naissance &&
          adresse_ligne_1 == o.adresse_ligne_1 &&
          adresse_ligne_2 == o.adresse_ligne_2 &&
          adresse_ligne_3 == o.adresse_ligne_3 &&
          code_postal == o.code_postal &&
          ville == o.ville &&
          pays == o.pays &&
          code_pays == o.code_pays &&
          pourcentage_parts == o.pourcentage_parts &&
          pourcentage_parts_directes == o.pourcentage_parts_directes &&
          pourcentage_parts_indirectes == o.pourcentage_parts_indirectes &&
          pourcentage_parts_vocation_titulaire == o.pourcentage_parts_vocation_titulaire &&
          details_parts_directes == o.details_parts_directes &&
          details_parts_indirectes == o.details_parts_indirectes &&
          details_parts_vocation_titulaire == o.details_parts_vocation_titulaire &&
          pourcentage_votes == o.pourcentage_votes &&
          pourcentage_votes_directs == o.pourcentage_votes_directs &&
          pourcentage_votes_indirect == o.pourcentage_votes_indirect &&
          details_votes_directs == o.details_votes_directs &&
          details_votes_indirects == o.details_votes_indirects &&
          details_societe_de_gestion == o.details_societe_de_gestion &&
          detention_pouvoir_decision_ag == o.detention_pouvoir_decision_ag &&
          detention_pouvoir_nom_membre_conseil_administration == o.detention_pouvoir_nom_membre_conseil_administration &&
          detention_autres_moyens_controle == o.detention_autres_moyens_controle &&
          beneficiaire_representant_legal == o.beneficiaire_representant_legal &&
          representant_legal_placement_sans_gestion_delegation == o.representant_legal_placement_sans_gestion_delegation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date_greffe, type, nom, nom_usage, prenom, pseudonyme, date_de_naissance_formatee, date_de_naissance_complete_formatee, nationalite, code_nationalite, ville_de_naissance, pays_de_naissance, code_pays_de_naissance, adresse_ligne_1, adresse_ligne_2, adresse_ligne_3, code_postal, ville, pays, code_pays, pourcentage_parts, pourcentage_parts_directes, pourcentage_parts_indirectes, pourcentage_parts_vocation_titulaire, details_parts_directes, details_parts_indirectes, details_parts_vocation_titulaire, pourcentage_votes, pourcentage_votes_directs, pourcentage_votes_indirect, details_votes_directs, details_votes_indirects, details_societe_de_gestion, detention_pouvoir_decision_ag, detention_pouvoir_nom_membre_conseil_administration, detention_autres_moyens_controle, beneficiaire_representant_legal, representant_legal_placement_sans_gestion_delegation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
