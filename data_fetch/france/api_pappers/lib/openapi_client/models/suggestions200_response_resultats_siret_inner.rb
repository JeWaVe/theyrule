=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Suggestions200ResponseResultatsSiretInner
    # SIRET de l'entreprise, avec le texte recherché encerclé d'une balise HTML `<em>`.
    attr_accessor :mention

    # Le numéro SIREN de l'entreprise au format xxxxxxxxx.
    attr_accessor :siren

    # Le numéro SIREN de l'entreprise au format xxx xxx xxx.
    attr_accessor :siren_formate

    # Le nom de l'entreprise. Il est égal à sigle + dénomination en cas de personne morale, ou à nom + prénom en cas de personne physique.
    attr_accessor :nom_entreprise

    # Vrai en cas de personne morale, faux en cas de personne physique.
    attr_accessor :personne_morale

    # Dénomination de l'entreprise si personne morale.
    attr_accessor :denomination

    # Nom si personne physique.
    attr_accessor :nom

    # Prénom si personne physique.
    attr_accessor :prenom

    # Sexe si personne physique. F pour féminin, M pour masculin.
    attr_accessor :sexe

    # Code NAF de l'entreprise.
    attr_accessor :code_naf

    # Libellé du code NAF de l'entreprise.
    attr_accessor :libelle_code_naf

    # Domaine d'activité de l'entreprise.
    attr_accessor :domaine_activite

    # Liste des conventions collectives de l'entreprise.
    attr_accessor :conventions_collectives

    # Date de création de l'entreprise au format AAAA-MM-JJ.
    attr_accessor :date_creation

    # Date de création de l'entreprise au format JJ/MM/AAAA.
    attr_accessor :date_creation_formate

    # Si vrai, l'entreprise n'est plus en activité. Sinon, elle est toujours en activité.
    attr_accessor :entreprise_cessee

    # Date de cessation de l'entreprise au format AAAA-MM-JJ.
    attr_accessor :date_cessation

    # Si vrai, l'entreprise a au moins un employé.
    attr_accessor :entreprise_employeuse

    # Catégorie juridique de l'entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l'INSEE, à l'exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
    attr_accessor :categorie_juridique

    # Forme juridique de l'entreprise.
    attr_accessor :forme_juridique

    # Tranche d'effectif de l'entreprise.
    attr_accessor :effectif

    # Effectif minimal de l'entreprise.
    attr_accessor :effectif_min

    # Effectif maximal de l'entreprise.
    attr_accessor :effectif_max

    # Tranche d'effectif de l'entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/sirene/public/variable/tefen#:~:text=Cette%20variable%20correspond%20%C3%A0%20la,effectif%20salari%C3%A9%20de%20l'entreprise.).
    attr_accessor :tranche_effectif

    # Année de validité des variables effectif, effectif_min et effectif_max.
    attr_accessor :annee_effectif

    # Capital de l'entreprise.
    attr_accessor :capital

    # Statut de l'entreprise au RCS
    attr_accessor :statut_rcs

    attr_accessor :siege

    # Liste des villes où l'entreprise a au moins un établissement.
    attr_accessor :villes

    # Chiffre d'affaires de l'entreprise.
    attr_accessor :chiffre_affaires

    # Résultat de l'entreprise.
    attr_accessor :resultat

    # Effectif de l'entreprise.
    attr_accessor :effectifs_finances

    # Année de correspondance des variables financières (chiffre_affaires, resultat, effectifs_finances).
    attr_accessor :annee_finances

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'mention' => :'mention',
        :'siren' => :'siren',
        :'siren_formate' => :'siren_formate',
        :'nom_entreprise' => :'nom_entreprise',
        :'personne_morale' => :'personne_morale',
        :'denomination' => :'denomination',
        :'nom' => :'nom',
        :'prenom' => :'prenom',
        :'sexe' => :'sexe',
        :'code_naf' => :'code_naf',
        :'libelle_code_naf' => :'libelle_code_naf',
        :'domaine_activite' => :'domaine_activite',
        :'conventions_collectives' => :'conventions_collectives',
        :'date_creation' => :'date_creation',
        :'date_creation_formate' => :'date_creation_formate',
        :'entreprise_cessee' => :'entreprise_cessee',
        :'date_cessation' => :'date_cessation',
        :'entreprise_employeuse' => :'entreprise_employeuse',
        :'categorie_juridique' => :'categorie_juridique',
        :'forme_juridique' => :'forme_juridique',
        :'effectif' => :'effectif',
        :'effectif_min' => :'effectif_min',
        :'effectif_max' => :'effectif_max',
        :'tranche_effectif' => :'tranche_effectif',
        :'annee_effectif' => :'annee_effectif',
        :'capital' => :'capital',
        :'statut_rcs' => :'statut_rcs',
        :'siege' => :'siege',
        :'villes' => :'villes',
        :'chiffre_affaires' => :'chiffre_affaires',
        :'resultat' => :'resultat',
        :'effectifs_finances' => :'effectifs_finances',
        :'annee_finances' => :'annee_finances'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'mention' => :'String',
        :'siren' => :'String',
        :'siren_formate' => :'String',
        :'nom_entreprise' => :'String',
        :'personne_morale' => :'Boolean',
        :'denomination' => :'String',
        :'nom' => :'String',
        :'prenom' => :'String',
        :'sexe' => :'String',
        :'code_naf' => :'String',
        :'libelle_code_naf' => :'String',
        :'domaine_activite' => :'String',
        :'conventions_collectives' => :'Array<EntrepriseBaseConventionsCollectivesInner>',
        :'date_creation' => :'Date',
        :'date_creation_formate' => :'String',
        :'entreprise_cessee' => :'Boolean',
        :'date_cessation' => :'String',
        :'entreprise_employeuse' => :'Boolean',
        :'categorie_juridique' => :'String',
        :'forme_juridique' => :'String',
        :'effectif' => :'String',
        :'effectif_min' => :'Integer',
        :'effectif_max' => :'Integer',
        :'tranche_effectif' => :'String',
        :'annee_effectif' => :'Integer',
        :'capital' => :'Float',
        :'statut_rcs' => :'String',
        :'siege' => :'EtablissementRecherche',
        :'villes' => :'Array<String>',
        :'chiffre_affaires' => :'Integer',
        :'resultat' => :'Integer',
        :'effectifs_finances' => :'Integer',
        :'annee_finances' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'EntrepriseRecherche',
      :'Suggestions200ResponseResultatsSiretInnerAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Suggestions200ResponseResultatsSiretInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Suggestions200ResponseResultatsSiretInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'mention')
        self.mention = attributes[:'mention']
      end

      if attributes.key?(:'siren')
        self.siren = attributes[:'siren']
      end

      if attributes.key?(:'siren_formate')
        self.siren_formate = attributes[:'siren_formate']
      end

      if attributes.key?(:'nom_entreprise')
        self.nom_entreprise = attributes[:'nom_entreprise']
      end

      if attributes.key?(:'personne_morale')
        self.personne_morale = attributes[:'personne_morale']
      end

      if attributes.key?(:'denomination')
        self.denomination = attributes[:'denomination']
      end

      if attributes.key?(:'nom')
        self.nom = attributes[:'nom']
      end

      if attributes.key?(:'prenom')
        self.prenom = attributes[:'prenom']
      end

      if attributes.key?(:'sexe')
        self.sexe = attributes[:'sexe']
      end

      if attributes.key?(:'code_naf')
        self.code_naf = attributes[:'code_naf']
      end

      if attributes.key?(:'libelle_code_naf')
        self.libelle_code_naf = attributes[:'libelle_code_naf']
      end

      if attributes.key?(:'domaine_activite')
        self.domaine_activite = attributes[:'domaine_activite']
      end

      if attributes.key?(:'conventions_collectives')
        if (value = attributes[:'conventions_collectives']).is_a?(Array)
          self.conventions_collectives = value
        end
      end

      if attributes.key?(:'date_creation')
        self.date_creation = attributes[:'date_creation']
      end

      if attributes.key?(:'date_creation_formate')
        self.date_creation_formate = attributes[:'date_creation_formate']
      end

      if attributes.key?(:'entreprise_cessee')
        self.entreprise_cessee = attributes[:'entreprise_cessee']
      end

      if attributes.key?(:'date_cessation')
        self.date_cessation = attributes[:'date_cessation']
      end

      if attributes.key?(:'entreprise_employeuse')
        self.entreprise_employeuse = attributes[:'entreprise_employeuse']
      end

      if attributes.key?(:'categorie_juridique')
        self.categorie_juridique = attributes[:'categorie_juridique']
      end

      if attributes.key?(:'forme_juridique')
        self.forme_juridique = attributes[:'forme_juridique']
      end

      if attributes.key?(:'effectif')
        self.effectif = attributes[:'effectif']
      end

      if attributes.key?(:'effectif_min')
        self.effectif_min = attributes[:'effectif_min']
      end

      if attributes.key?(:'effectif_max')
        self.effectif_max = attributes[:'effectif_max']
      end

      if attributes.key?(:'tranche_effectif')
        self.tranche_effectif = attributes[:'tranche_effectif']
      end

      if attributes.key?(:'annee_effectif')
        self.annee_effectif = attributes[:'annee_effectif']
      end

      if attributes.key?(:'capital')
        self.capital = attributes[:'capital']
      end

      if attributes.key?(:'statut_rcs')
        self.statut_rcs = attributes[:'statut_rcs']
      end

      if attributes.key?(:'siege')
        self.siege = attributes[:'siege']
      end

      if attributes.key?(:'villes')
        if (value = attributes[:'villes']).is_a?(Array)
          self.villes = value
        end
      end

      if attributes.key?(:'chiffre_affaires')
        self.chiffre_affaires = attributes[:'chiffre_affaires']
      end

      if attributes.key?(:'resultat')
        self.resultat = attributes[:'resultat']
      end

      if attributes.key?(:'effectifs_finances')
        self.effectifs_finances = attributes[:'effectifs_finances']
      end

      if attributes.key?(:'annee_finances')
        self.annee_finances = attributes[:'annee_finances']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          mention == o.mention &&
          siren == o.siren &&
          siren_formate == o.siren_formate &&
          nom_entreprise == o.nom_entreprise &&
          personne_morale == o.personne_morale &&
          denomination == o.denomination &&
          nom == o.nom &&
          prenom == o.prenom &&
          sexe == o.sexe &&
          code_naf == o.code_naf &&
          libelle_code_naf == o.libelle_code_naf &&
          domaine_activite == o.domaine_activite &&
          conventions_collectives == o.conventions_collectives &&
          date_creation == o.date_creation &&
          date_creation_formate == o.date_creation_formate &&
          entreprise_cessee == o.entreprise_cessee &&
          date_cessation == o.date_cessation &&
          entreprise_employeuse == o.entreprise_employeuse &&
          categorie_juridique == o.categorie_juridique &&
          forme_juridique == o.forme_juridique &&
          effectif == o.effectif &&
          effectif_min == o.effectif_min &&
          effectif_max == o.effectif_max &&
          tranche_effectif == o.tranche_effectif &&
          annee_effectif == o.annee_effectif &&
          capital == o.capital &&
          statut_rcs == o.statut_rcs &&
          siege == o.siege &&
          villes == o.villes &&
          chiffre_affaires == o.chiffre_affaires &&
          resultat == o.resultat &&
          effectifs_finances == o.effectifs_finances &&
          annee_finances == o.annee_finances
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [mention, siren, siren_formate, nom_entreprise, personne_morale, denomination, nom, prenom, sexe, code_naf, libelle_code_naf, domaine_activite, conventions_collectives, date_creation, date_creation_formate, entreprise_cessee, date_cessation, entreprise_employeuse, categorie_juridique, forme_juridique, effectif, effectif_min, effectif_max, tranche_effectif, annee_effectif, capital, statut_rcs, siege, villes, chiffre_affaires, resultat, effectifs_finances, annee_finances].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
