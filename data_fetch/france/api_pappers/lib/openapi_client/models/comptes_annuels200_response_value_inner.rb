=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Année
  class ComptesAnnuels200ResponseValueInner
    # Date de dépôt des comptes, au format AAAA-MM-JJ.
    attr_accessor :date_depot

    # Code du greffe de dépôt des comptes.
    attr_accessor :code_greffe

    # Numéro de dépôt des comptes au greffe.
    attr_accessor :numero_depot

    # Numéro de gestion au greffe.
    attr_accessor :numero_gestion

    # Date de cloture des comptes, au format AAAA-MM-JJ.
    attr_accessor :date_cloture

    # Date de cloture des comptes n-1, lorsque présents, au format AAAA-MM-JJ.
    attr_accessor :date_cloture_n_1

    # Durée de l'exercice déposé, en mois.
    attr_accessor :duree_exercice_n

    # Durée de l'exercice précédent, lorsque présent, en mois.
    attr_accessor :duree_exercice_n_1

    # Type de comptes (C = complets ; S = simplifiés ; K = consolidés ; CS = mélange complets/simplifiés ; B = banques ; A = assurances).
    attr_accessor :type_comptes

    # Libellé du type de comptes.
    attr_accessor :libelle_type_comptes

    # Devise des comptes.
    attr_accessor :devise

    # Devise d'origine en cas de conversion.
    attr_accessor :devise_origine

    # Confidentialité totale des comptes.
    attr_accessor :confidentialite

    # Confidentialité partielle des comptes (seul le compte de résultat est confidentiel, le reste des comptes sont disponibles).
    attr_accessor :confidentialite_compte_de_resultat

    # Description du type de saisie des comptes.
    attr_accessor :type_saisie

    # Informations complémentaires sur le traitement des comptes.
    attr_accessor :informations_traitement

    # Liste des sections de liasses fiscales.
    attr_accessor :sections

    attr_accessor :ratios

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date_depot' => :'date_depot',
        :'code_greffe' => :'code_greffe',
        :'numero_depot' => :'numero_depot',
        :'numero_gestion' => :'numero_gestion',
        :'date_cloture' => :'date_cloture',
        :'date_cloture_n_1' => :'date_cloture_n-1',
        :'duree_exercice_n' => :'duree_exercice_n',
        :'duree_exercice_n_1' => :'duree_exercice_n-1',
        :'type_comptes' => :'type_comptes',
        :'libelle_type_comptes' => :'libelle_type_comptes',
        :'devise' => :'devise',
        :'devise_origine' => :'devise_origine',
        :'confidentialite' => :'confidentialite',
        :'confidentialite_compte_de_resultat' => :'confidentialite_compte_de_resultat',
        :'type_saisie' => :'type_saisie',
        :'informations_traitement' => :'informations_traitement',
        :'sections' => :'sections',
        :'ratios' => :'ratios'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'date_depot' => :'String',
        :'code_greffe' => :'String',
        :'numero_depot' => :'String',
        :'numero_gestion' => :'String',
        :'date_cloture' => :'String',
        :'date_cloture_n_1' => :'String',
        :'duree_exercice_n' => :'Integer',
        :'duree_exercice_n_1' => :'Integer',
        :'type_comptes' => :'String',
        :'libelle_type_comptes' => :'String',
        :'devise' => :'String',
        :'devise_origine' => :'String',
        :'confidentialite' => :'Boolean',
        :'confidentialite_compte_de_resultat' => :'Boolean',
        :'type_saisie' => :'String',
        :'informations_traitement' => :'Array<String>',
        :'sections' => :'Array<ComptesAnnuels200ResponseValueInnerSectionsInner>',
        :'ratios' => :'Ratios'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ComptesAnnuels200ResponseValueInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ComptesAnnuels200ResponseValueInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'date_depot')
        self.date_depot = attributes[:'date_depot']
      end

      if attributes.key?(:'code_greffe')
        self.code_greffe = attributes[:'code_greffe']
      end

      if attributes.key?(:'numero_depot')
        self.numero_depot = attributes[:'numero_depot']
      end

      if attributes.key?(:'numero_gestion')
        self.numero_gestion = attributes[:'numero_gestion']
      end

      if attributes.key?(:'date_cloture')
        self.date_cloture = attributes[:'date_cloture']
      end

      if attributes.key?(:'date_cloture_n_1')
        self.date_cloture_n_1 = attributes[:'date_cloture_n_1']
      end

      if attributes.key?(:'duree_exercice_n')
        self.duree_exercice_n = attributes[:'duree_exercice_n']
      end

      if attributes.key?(:'duree_exercice_n_1')
        self.duree_exercice_n_1 = attributes[:'duree_exercice_n_1']
      end

      if attributes.key?(:'type_comptes')
        self.type_comptes = attributes[:'type_comptes']
      end

      if attributes.key?(:'libelle_type_comptes')
        self.libelle_type_comptes = attributes[:'libelle_type_comptes']
      end

      if attributes.key?(:'devise')
        self.devise = attributes[:'devise']
      end

      if attributes.key?(:'devise_origine')
        self.devise_origine = attributes[:'devise_origine']
      end

      if attributes.key?(:'confidentialite')
        self.confidentialite = attributes[:'confidentialite']
      end

      if attributes.key?(:'confidentialite_compte_de_resultat')
        self.confidentialite_compte_de_resultat = attributes[:'confidentialite_compte_de_resultat']
      end

      if attributes.key?(:'type_saisie')
        self.type_saisie = attributes[:'type_saisie']
      end

      if attributes.key?(:'informations_traitement')
        if (value = attributes[:'informations_traitement']).is_a?(Array)
          self.informations_traitement = value
        end
      end

      if attributes.key?(:'sections')
        if (value = attributes[:'sections']).is_a?(Array)
          self.sections = value
        end
      end

      if attributes.key?(:'ratios')
        self.ratios = attributes[:'ratios']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_comptes_validator = EnumAttributeValidator.new('String', ["C", "S", "K", "CS", "B", "A"])
      return false unless type_comptes_validator.valid?(@type_comptes)
      libelle_type_comptes_validator = EnumAttributeValidator.new('String', ["Complets", "Simplifiés", "Consolidés", "Complets/Simplifiés", "Banques", "Assurances"])
      return false unless libelle_type_comptes_validator.valid?(@libelle_type_comptes)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type_comptes Object to be assigned
    def type_comptes=(type_comptes)
      validator = EnumAttributeValidator.new('String', ["C", "S", "K", "CS", "B", "A"])
      unless validator.valid?(type_comptes)
        fail ArgumentError, "invalid value for \"type_comptes\", must be one of #{validator.allowable_values}."
      end
      @type_comptes = type_comptes
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] libelle_type_comptes Object to be assigned
    def libelle_type_comptes=(libelle_type_comptes)
      validator = EnumAttributeValidator.new('String', ["Complets", "Simplifiés", "Consolidés", "Complets/Simplifiés", "Banques", "Assurances"])
      unless validator.valid?(libelle_type_comptes)
        fail ArgumentError, "invalid value for \"libelle_type_comptes\", must be one of #{validator.allowable_values}."
      end
      @libelle_type_comptes = libelle_type_comptes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date_depot == o.date_depot &&
          code_greffe == o.code_greffe &&
          numero_depot == o.numero_depot &&
          numero_gestion == o.numero_gestion &&
          date_cloture == o.date_cloture &&
          date_cloture_n_1 == o.date_cloture_n_1 &&
          duree_exercice_n == o.duree_exercice_n &&
          duree_exercice_n_1 == o.duree_exercice_n_1 &&
          type_comptes == o.type_comptes &&
          libelle_type_comptes == o.libelle_type_comptes &&
          devise == o.devise &&
          devise_origine == o.devise_origine &&
          confidentialite == o.confidentialite &&
          confidentialite_compte_de_resultat == o.confidentialite_compte_de_resultat &&
          type_saisie == o.type_saisie &&
          informations_traitement == o.informations_traitement &&
          sections == o.sections &&
          ratios == o.ratios
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date_depot, code_greffe, numero_depot, numero_gestion, date_cloture, date_cloture_n_1, duree_exercice_n, duree_exercice_n_1, type_comptes, libelle_type_comptes, devise, devise_origine, confidentialite, confidentialite_compte_de_resultat, type_saisie, informations_traitement, sections, ratios].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
