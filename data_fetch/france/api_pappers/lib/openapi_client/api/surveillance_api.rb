=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module OpenapiClient
  class SurveillanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Ajoute un (ou plusieurs) dirigeant(s) à une liste de dirigeants.
    # Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste. Les informations à renseigner sont différentes selon le type de personne à ajouter (morale ou physique)
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance de dirigeants
    # @param surveillance_dirigeant_request_inner [Array<SurveillanceDirigeantRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @return [SurveillanceDirigeant200Response]
    def surveillance_dirigeant(api_token, id_liste, surveillance_dirigeant_request_inner, opts = {})
      data, _status_code, _headers = surveillance_dirigeant_with_http_info(api_token, id_liste, surveillance_dirigeant_request_inner, opts)
      data
    end

    # Ajoute un (ou plusieurs) dirigeant(s) à une liste de dirigeants.
    # Vous devez fournir la clé d&#39;utilisation de l&#39;API ainsi que l&#39;identifiant de votre liste. Les informations à renseigner sont différentes selon le type de personne à ajouter (morale ou physique)
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance de dirigeants
    # @param surveillance_dirigeant_request_inner [Array<SurveillanceDirigeantRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveillanceDirigeant200Response, Integer, Hash)>] SurveillanceDirigeant200Response data, response status code and response headers
    def surveillance_dirigeant_with_http_info(api_token, id_liste, surveillance_dirigeant_request_inner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveillanceApi.surveillance_dirigeant ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling SurveillanceApi.surveillance_dirigeant"
      end
      # verify the required parameter 'id_liste' is set
      if @api_client.config.client_side_validation && id_liste.nil?
        fail ArgumentError, "Missing the required parameter 'id_liste' when calling SurveillanceApi.surveillance_dirigeant"
      end
      # verify the required parameter 'surveillance_dirigeant_request_inner' is set
      if @api_client.config.client_side_validation && surveillance_dirigeant_request_inner.nil?
        fail ArgumentError, "Missing the required parameter 'surveillance_dirigeant_request_inner' when calling SurveillanceApi.surveillance_dirigeant"
      end
      # resource path
      local_var_path = '/liste/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'id_liste'] = id_liste

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(surveillance_dirigeant_request_inner)

      # return_type
      return_type = opts[:debug_return_type] || 'SurveillanceDirigeant200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SurveillanceApi.surveillance_dirigeant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveillanceApi#surveillance_dirigeant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ajoute une (ou plusieurs) entreprise(s) à une liste d'entreprises.
    # Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance d&#39;entreprises
    # @param surveillance_entreprise_request_inner [Array<SurveillanceEntrepriseRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @return [SurveillanceEntreprise200Response]
    def surveillance_entreprise(api_token, id_liste, surveillance_entreprise_request_inner, opts = {})
      data, _status_code, _headers = surveillance_entreprise_with_http_info(api_token, id_liste, surveillance_entreprise_request_inner, opts)
      data
    end

    # Ajoute une (ou plusieurs) entreprise(s) à une liste d&#39;entreprises.
    # Vous devez fournir la clé d&#39;utilisation de l&#39;API ainsi que l&#39;identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance d&#39;entreprises
    # @param surveillance_entreprise_request_inner [Array<SurveillanceEntrepriseRequestInner>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveillanceEntreprise200Response, Integer, Hash)>] SurveillanceEntreprise200Response data, response status code and response headers
    def surveillance_entreprise_with_http_info(api_token, id_liste, surveillance_entreprise_request_inner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveillanceApi.surveillance_entreprise ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling SurveillanceApi.surveillance_entreprise"
      end
      # verify the required parameter 'id_liste' is set
      if @api_client.config.client_side_validation && id_liste.nil?
        fail ArgumentError, "Missing the required parameter 'id_liste' when calling SurveillanceApi.surveillance_entreprise"
      end
      # verify the required parameter 'surveillance_entreprise_request_inner' is set
      if @api_client.config.client_side_validation && surveillance_entreprise_request_inner.nil?
        fail ArgumentError, "Missing the required parameter 'surveillance_entreprise_request_inner' when calling SurveillanceApi.surveillance_entreprise"
      end
      # resource path
      local_var_path = '/liste'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'id_liste'] = id_liste

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(surveillance_entreprise_request_inner)

      # return_type
      return_type = opts[:debug_return_type] || 'SurveillanceEntreprise200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SurveillanceApi.surveillance_entreprise",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveillanceApi#surveillance_entreprise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ajoute des informations à une (ou plusieurs) notification(s).
    # Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance d&#39;entreprises
    # @param surveillance_liste_informations_request [SurveillanceListeInformationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def surveillance_liste_informations(api_token, id_liste, surveillance_liste_informations_request, opts = {})
      surveillance_liste_informations_with_http_info(api_token, id_liste, surveillance_liste_informations_request, opts)
      nil
    end

    # Ajoute des informations à une (ou plusieurs) notification(s).
    # Vous devez fournir la clé d&#39;utilisation de l&#39;API ainsi que l&#39;identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance d&#39;entreprises
    # @param surveillance_liste_informations_request [SurveillanceListeInformationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def surveillance_liste_informations_with_http_info(api_token, id_liste, surveillance_liste_informations_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveillanceApi.surveillance_liste_informations ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling SurveillanceApi.surveillance_liste_informations"
      end
      # verify the required parameter 'id_liste' is set
      if @api_client.config.client_side_validation && id_liste.nil?
        fail ArgumentError, "Missing the required parameter 'id_liste' when calling SurveillanceApi.surveillance_liste_informations"
      end
      # verify the required parameter 'surveillance_liste_informations_request' is set
      if @api_client.config.client_side_validation && surveillance_liste_informations_request.nil?
        fail ArgumentError, "Missing the required parameter 'surveillance_liste_informations_request' when calling SurveillanceApi.surveillance_liste_informations"
      end
      # resource path
      local_var_path = '/liste-informations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'id_liste'] = id_liste

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(surveillance_liste_informations_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SurveillanceApi.surveillance_liste_informations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveillanceApi#surveillance_liste_informations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Supprime une (ou plusieurs) notification(s) d'une liste.
    # Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren Liste des sirens des notifications à supprimer, séparés par une virgule
    # @option opts [String] :id Liste des ids des notifications à supprimer, séparés par une virgule
    # @option opts [Boolean] :supprimer_totalite Suppression de toutes les notifications de la liste
    # @return [SurveillanceNotificationsDelete200Response]
    def surveillance_notifications_delete(api_token, id_liste, opts = {})
      data, _status_code, _headers = surveillance_notifications_delete_with_http_info(api_token, id_liste, opts)
      data
    end

    # Supprime une (ou plusieurs) notification(s) d&#39;une liste.
    # Vous devez fournir la clé d&#39;utilisation de l&#39;API ainsi que l&#39;identifiant de votre liste.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param id_liste [String] Identifiant unique de votre liste de surveillance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren Liste des sirens des notifications à supprimer, séparés par une virgule
    # @option opts [String] :id Liste des ids des notifications à supprimer, séparés par une virgule
    # @option opts [Boolean] :supprimer_totalite Suppression de toutes les notifications de la liste
    # @return [Array<(SurveillanceNotificationsDelete200Response, Integer, Hash)>] SurveillanceNotificationsDelete200Response data, response status code and response headers
    def surveillance_notifications_delete_with_http_info(api_token, id_liste, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SurveillanceApi.surveillance_notifications_delete ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling SurveillanceApi.surveillance_notifications_delete"
      end
      # verify the required parameter 'id_liste' is set
      if @api_client.config.client_side_validation && id_liste.nil?
        fail ArgumentError, "Missing the required parameter 'id_liste' when calling SurveillanceApi.surveillance_notifications_delete"
      end
      # resource path
      local_var_path = '/liste/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'id_liste'] = id_liste
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'supprimer_totalite'] = opts[:'supprimer_totalite'] if !opts[:'supprimer_totalite'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SurveillanceNotificationsDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SurveillanceApi.surveillance_notifications_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SurveillanceApi#surveillance_notifications_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
