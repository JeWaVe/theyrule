=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module OpenapiClient
  class DocumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Télécharge l'avis de situation INSEE d'une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [File]
    def document_avis_situation_insee(api_token, opts = {})
      data, _status_code, _headers = document_avis_situation_insee_with_http_info(api_token, opts)
      data
    end

    # Télécharge l&#39;avis de situation INSEE d&#39;une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_avis_situation_insee_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_avis_situation_insee ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_avis_situation_insee"
      end
      # resource path
      local_var_path = '/document/avis_situation_insee'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?
      query_params[:'siret'] = opts[:'siret'] if !opts[:'siret'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_avis_situation_insee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_avis_situation_insee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Télécharge la déclaration des bénéficiaires effectifs d'une entreprise à partir de son SIREN.
    # Vous devez fournir le SIREN. Le document vous sera envoyé au format PDF.  Seules les autorités de contrôle (<a rel='noreferrer noopener' target='_blank' href='https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000041578272/'>article R. 561-57 du Code monétaire et financier en dénombre 18</a>) et les personnes assujetties à la lutte contre le blanchiment des capitaux et le financement du terrorisme (<a rel='noreferrer noopener' target='_blank' href='https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000042648575/'>article L. 561-2 du code monétaire et financier</a>) peuvent accéder à ces informations.  Pour pouvoir utiliser cette route veuillez nous contacter au préalable à api@pappers.fr
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @return [File]
    def document_beneficiaires_effectifs(api_token, opts = {})
      data, _status_code, _headers = document_beneficiaires_effectifs_with_http_info(api_token, opts)
      data
    end

    # Télécharge la déclaration des bénéficiaires effectifs d&#39;une entreprise à partir de son SIREN.
    # Vous devez fournir le SIREN. Le document vous sera envoyé au format PDF.  Seules les autorités de contrôle (&lt;a rel&#x3D;&#39;noreferrer noopener&#39; target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000041578272/&#39;&gt;article R. 561-57 du Code monétaire et financier en dénombre 18&lt;/a&gt;) et les personnes assujetties à la lutte contre le blanchiment des capitaux et le financement du terrorisme (&lt;a rel&#x3D;&#39;noreferrer noopener&#39; target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://www.legifrance.gouv.fr/codes/article_lc/LEGIARTI000042648575/&#39;&gt;article L. 561-2 du code monétaire et financier&lt;/a&gt;) peuvent accéder à ces informations.  Pour pouvoir utiliser cette route veuillez nous contacter au préalable à api@pappers.fr
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_beneficiaires_effectifs_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_beneficiaires_effectifs ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_beneficiaires_effectifs"
      end
      # resource path
      local_var_path = '/document/declaration_beneficiaires_effectifs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_beneficiaires_effectifs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_beneficiaires_effectifs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Télécharge l'extrait INPI d'une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [File]
    def document_extrait_inpi(api_token, opts = {})
      data, _status_code, _headers = document_extrait_inpi_with_http_info(api_token, opts)
      data
    end

    # Télécharge l&#39;extrait INPI d&#39;une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_extrait_inpi_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_extrait_inpi ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_extrait_inpi"
      end
      # resource path
      local_var_path = '/document/extrait_inpi'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?
      query_params[:'siret'] = opts[:'siret'] if !opts[:'siret'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_extrait_inpi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_extrait_inpi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Télécharge l'extrait Pappers d'une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [File]
    def document_extrait_pappers(api_token, opts = {})
      data, _status_code, _headers = document_extrait_pappers_with_http_info(api_token, opts)
      data
    end

    # Télécharge l&#39;extrait Pappers d&#39;une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_extrait_pappers_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_extrait_pappers ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_extrait_pappers"
      end
      # resource path
      local_var_path = '/document/extrait_pappers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?
      query_params[:'siret'] = opts[:'siret'] if !opts[:'siret'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_extrait_pappers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_extrait_pappers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Télécharge les derniers statuts disponibles d'une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [File]
    def document_status(api_token, opts = {})
      data, _status_code, _headers = document_status_with_http_info(api_token, opts)
      data
    end

    # Télécharge les derniers statuts disponibles d&#39;une entreprise à partir de son SIREN ou SIRET.
    # Vous devez fournir soit le SIREN, soit le SIRET. Le document vous sera envoyé au format PDF.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param [Hash] opts the optional parameters
    # @option opts [String] :siren SIREN de l&#39;entreprise
    # @option opts [String] :siret SIRET de l&#39;entreprise
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_status_with_http_info(api_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_status ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_status"
      end
      # resource path
      local_var_path = '/document/statuts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'siren'] = opts[:'siren'] if !opts[:'siren'].nil?
      query_params[:'siret'] = opts[:'siret'] if !opts[:'siret'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Télécharge un document PDF ou XLSX à partir de son token.
    # Vous devez fournir le token du document. Le document vous sera envoyé au format PDF ou XLSX.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param token [String] Token du document
    # @param [Hash] opts the optional parameters
    # @return [File]
    def document_telechargement(api_token, token, opts = {})
      data, _status_code, _headers = document_telechargement_with_http_info(api_token, token, opts)
      data
    end

    # Télécharge un document PDF ou XLSX à partir de son token.
    # Vous devez fournir le token du document. Le document vous sera envoyé au format PDF ou XLSX.
    # @param api_token [String] Clé d&#39;utilisation de l&#39;API
    # @param token [String] Token du document
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def document_telechargement_with_http_info(api_token, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentsApi.document_telechargement ...'
      end
      # verify the required parameter 'api_token' is set
      if @api_client.config.client_side_validation && api_token.nil?
        fail ArgumentError, "Missing the required parameter 'api_token' when calling DocumentsApi.document_telechargement"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DocumentsApi.document_telechargement"
      end
      # resource path
      local_var_path = '/document/telechargement'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api_token'] = api_token
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DocumentsApi.document_telechargement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentsApi#document_telechargement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
