=begin
#Pappers API

#L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

The version of the OpenAPI document: 2.7.0
Contact: support@pappers.fr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module OpenapiClient
  class SuggestionsAutocompleteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Recherche les entreprises qui correspondent à un début de recherche textuelle (type autocomplete).
    # Cette route nécessite généralement d'avoir un temps de réponse très faible. Une URL avec un temps de réponse plus faible a été mise en place : `https://suggestions.pappers.fr/v2?q=googl`. D'autre part, afin de permettre une intégration en front-end la plus directe, cette route ne nécessite pas de token d'authentification.
    # @param q [String] Début de recherche textuelle
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :longueur Nombre de résultats. Maximum 100. Valeur par défaut : &#x60;10&#x60;.
    # @option opts [String] :cibles Cibles de la recherche, séparées par des virgules. Valeur par défaut : &#x60;\&quot;nom_entreprise\&quot;&#x60;.
    # @return [Suggestions200Response]
    def suggestions(q, opts = {})
      data, _status_code, _headers = suggestions_with_http_info(q, opts)
      data
    end

    # Recherche les entreprises qui correspondent à un début de recherche textuelle (type autocomplete).
    # Cette route nécessite généralement d&#39;avoir un temps de réponse très faible. Une URL avec un temps de réponse plus faible a été mise en place : &#x60;https://suggestions.pappers.fr/v2?q&#x3D;googl&#x60;. D&#39;autre part, afin de permettre une intégration en front-end la plus directe, cette route ne nécessite pas de token d&#39;authentification.
    # @param q [String] Début de recherche textuelle
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :longueur Nombre de résultats. Maximum 100. Valeur par défaut : &#x60;10&#x60;.
    # @option opts [String] :cibles Cibles de la recherche, séparées par des virgules. Valeur par défaut : &#x60;\&quot;nom_entreprise\&quot;&#x60;.
    # @return [Array<(Suggestions200Response, Integer, Hash)>] Suggestions200Response data, response status code and response headers
    def suggestions_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SuggestionsAutocompleteApi.suggestions ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling SuggestionsAutocompleteApi.suggestions"
      end
      allowable_values = ["nom_entreprise", "denomination", "nom_complet", "representant", "siren", "siret"]
      if @api_client.config.client_side_validation && opts[:'cibles'] && !allowable_values.include?(opts[:'cibles'])
        fail ArgumentError, "invalid value for \"cibles\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/suggestions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q
      query_params[:'longueur'] = opts[:'longueur'] if !opts[:'longueur'].nil?
      query_params[:'cibles'] = opts[:'cibles'] if !opts[:'cibles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Suggestions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SuggestionsAutocompleteApi.suggestions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuggestionsAutocompleteApi#suggestions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
