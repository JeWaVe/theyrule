/**
 * Pappers API
 * L\'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d\'API dans les requêtes, en utilisant le paramètre `api_token`.  L\'URL d\'accès à l\'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L\'historique des modifications (changelog) est accessible à l\'url suivante : https://www.pappers.fr/api/changelog 
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { EntrepriseFiche } from '../model/entrepriseFiche';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.pappers.fr/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FicheEntrepriseApiApiKeys {
}

export class FicheEntrepriseApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: FicheEntrepriseApiApiKeys, value: string) {
        (this.authentications as any)[FicheEntrepriseApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Vous devez fournir soit le SIREN, soit le SIRET. Si vous indiquez le SIREN, tous les établissements associés à ce SIREN seront renvoyés dans la clé `etablissements`. Si vous indiquez le SIRET, seul l\'établissement associé sera renvoyé dans la clé `etablissement`.
     * @summary Récupère l\'ensemble des informations disponibles sur une entreprise.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param siren SIREN de l\&#39;entreprise
     * @param siret SIRET de l\&#39;entreprise
     * @param formatPublicationsBodacc Format attendu pour les publications BODACC. Valeur par défaut : &#x60;\&quot;objet\&quot;&#x60;.
     * @param marques Si vrai, le retour inclura les marques éventuelles de l\&#39;entreprise. Valeur par défaut : &#x60;false&#x60;.
     * @param validiteTvaIntracommunautaire Si vrai, le champ validite_tva_intracommunautaire du retour indiquera si le numéro de tva est valide auprès de la Commission européenne. Valeur par défaut : &#x60;false&#x60;.
     * @param publicationsBodaccBrutes Pappers traite les publications BODACC afin de supprimer les publications périmée. Si vrai, le retour inclura les publications bodacc sans traitement. Valeur par défaut : &#x60;false&#x60;.
     */
    public async entreprise (apiToken: string, siren?: string, siret?: string, formatPublicationsBodacc?: 'objet' | 'texte', marques?: boolean, validiteTvaIntracommunautaire?: boolean, publicationsBodaccBrutes?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EntrepriseFiche;  }> {
        const localVarPath = this.basePath + '/entreprise';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'apiToken' is not null or undefined
        if (apiToken === null || apiToken === undefined) {
            throw new Error('Required parameter apiToken was null or undefined when calling entreprise.');
        }

        if (apiToken !== undefined) {
            localVarQueryParameters['api_token'] = ObjectSerializer.serialize(apiToken, "string");
        }

        if (siren !== undefined) {
            localVarQueryParameters['siren'] = ObjectSerializer.serialize(siren, "string");
        }

        if (siret !== undefined) {
            localVarQueryParameters['siret'] = ObjectSerializer.serialize(siret, "string");
        }

        if (formatPublicationsBodacc !== undefined) {
            localVarQueryParameters['format_publications_bodacc'] = ObjectSerializer.serialize(formatPublicationsBodacc, "'objet' | 'texte'");
        }

        if (marques !== undefined) {
            localVarQueryParameters['marques'] = ObjectSerializer.serialize(marques, "boolean");
        }

        if (validiteTvaIntracommunautaire !== undefined) {
            localVarQueryParameters['validite_tva_intracommunautaire'] = ObjectSerializer.serialize(validiteTvaIntracommunautaire, "boolean");
        }

        if (publicationsBodaccBrutes !== undefined) {
            localVarQueryParameters['publications_bodacc_brutes'] = ObjectSerializer.serialize(publicationsBodaccBrutes, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EntrepriseFiche;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EntrepriseFiche");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
