/**
 * Pappers API
 * L\'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d\'API dans les requêtes, en utilisant le paramètre `api_token`.  L\'URL d\'accès à l\'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L\'historique des modifications (changelog) est accessible à l\'url suivante : https://www.pappers.fr/api/changelog 
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { SurveillanceDirigeant200Response } from '../model/surveillanceDirigeant200Response';
import { SurveillanceDirigeant201Response } from '../model/surveillanceDirigeant201Response';
import { SurveillanceDirigeantRequestInner } from '../model/surveillanceDirigeantRequestInner';
import { SurveillanceEntreprise200Response } from '../model/surveillanceEntreprise200Response';
import { SurveillanceEntreprise201Response } from '../model/surveillanceEntreprise201Response';
import { SurveillanceEntrepriseRequestInner } from '../model/surveillanceEntrepriseRequestInner';
import { SurveillanceListeInformationsRequest } from '../model/surveillanceListeInformationsRequest';
import { SurveillanceNotificationsDelete200Response } from '../model/surveillanceNotificationsDelete200Response';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.pappers.fr/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SurveillanceApiApiKeys {
}

export class SurveillanceApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SurveillanceApiApiKeys, value: string) {
        (this.authentications as any)[SurveillanceApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Vous devez fournir la clé d\'utilisation de l\'API ainsi que l\'identifiant de votre liste. Les informations à renseigner sont différentes selon le type de personne à ajouter (morale ou physique)
     * @summary Ajoute un (ou plusieurs) dirigeant(s) à une liste de dirigeants.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param idListe Identifiant unique de votre liste de surveillance de dirigeants
     * @param surveillanceDirigeantRequestInner 
     */
    public async surveillanceDirigeant (apiToken: string, idListe: string, surveillanceDirigeantRequestInner: Array<SurveillanceDirigeantRequestInner>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SurveillanceDirigeant200Response;  }> {
        const localVarPath = this.basePath + '/liste/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'apiToken' is not null or undefined
        if (apiToken === null || apiToken === undefined) {
            throw new Error('Required parameter apiToken was null or undefined when calling surveillanceDirigeant.');
        }

        // verify required parameter 'idListe' is not null or undefined
        if (idListe === null || idListe === undefined) {
            throw new Error('Required parameter idListe was null or undefined when calling surveillanceDirigeant.');
        }

        // verify required parameter 'surveillanceDirigeantRequestInner' is not null or undefined
        if (surveillanceDirigeantRequestInner === null || surveillanceDirigeantRequestInner === undefined) {
            throw new Error('Required parameter surveillanceDirigeantRequestInner was null or undefined when calling surveillanceDirigeant.');
        }

        if (apiToken !== undefined) {
            localVarQueryParameters['api_token'] = ObjectSerializer.serialize(apiToken, "string");
        }

        if (idListe !== undefined) {
            localVarQueryParameters['id_liste'] = ObjectSerializer.serialize(idListe, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(surveillanceDirigeantRequestInner, "Array<SurveillanceDirigeantRequestInner>")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SurveillanceDirigeant200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SurveillanceDirigeant200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Vous devez fournir la clé d\'utilisation de l\'API ainsi que l\'identifiant de votre liste.
     * @summary Ajoute une (ou plusieurs) entreprise(s) à une liste d\'entreprises.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param idListe Identifiant unique de votre liste de surveillance d\&#39;entreprises
     * @param surveillanceEntrepriseRequestInner 
     */
    public async surveillanceEntreprise (apiToken: string, idListe: string, surveillanceEntrepriseRequestInner: Array<SurveillanceEntrepriseRequestInner>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SurveillanceEntreprise200Response;  }> {
        const localVarPath = this.basePath + '/liste';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'apiToken' is not null or undefined
        if (apiToken === null || apiToken === undefined) {
            throw new Error('Required parameter apiToken was null or undefined when calling surveillanceEntreprise.');
        }

        // verify required parameter 'idListe' is not null or undefined
        if (idListe === null || idListe === undefined) {
            throw new Error('Required parameter idListe was null or undefined when calling surveillanceEntreprise.');
        }

        // verify required parameter 'surveillanceEntrepriseRequestInner' is not null or undefined
        if (surveillanceEntrepriseRequestInner === null || surveillanceEntrepriseRequestInner === undefined) {
            throw new Error('Required parameter surveillanceEntrepriseRequestInner was null or undefined when calling surveillanceEntreprise.');
        }

        if (apiToken !== undefined) {
            localVarQueryParameters['api_token'] = ObjectSerializer.serialize(apiToken, "string");
        }

        if (idListe !== undefined) {
            localVarQueryParameters['id_liste'] = ObjectSerializer.serialize(idListe, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(surveillanceEntrepriseRequestInner, "Array<SurveillanceEntrepriseRequestInner>")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SurveillanceEntreprise200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SurveillanceEntreprise200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Vous devez fournir la clé d\'utilisation de l\'API ainsi que l\'identifiant de votre liste.
     * @summary Ajoute des informations à une (ou plusieurs) notification(s).
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param idListe Identifiant unique de votre liste de surveillance d\&#39;entreprises
     * @param surveillanceListeInformationsRequest 
     */
    public async surveillanceListeInformations (apiToken: string, idListe: string, surveillanceListeInformationsRequest: SurveillanceListeInformationsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/liste-informations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apiToken' is not null or undefined
        if (apiToken === null || apiToken === undefined) {
            throw new Error('Required parameter apiToken was null or undefined when calling surveillanceListeInformations.');
        }

        // verify required parameter 'idListe' is not null or undefined
        if (idListe === null || idListe === undefined) {
            throw new Error('Required parameter idListe was null or undefined when calling surveillanceListeInformations.');
        }

        // verify required parameter 'surveillanceListeInformationsRequest' is not null or undefined
        if (surveillanceListeInformationsRequest === null || surveillanceListeInformationsRequest === undefined) {
            throw new Error('Required parameter surveillanceListeInformationsRequest was null or undefined when calling surveillanceListeInformations.');
        }

        if (apiToken !== undefined) {
            localVarQueryParameters['api_token'] = ObjectSerializer.serialize(apiToken, "string");
        }

        if (idListe !== undefined) {
            localVarQueryParameters['id_liste'] = ObjectSerializer.serialize(idListe, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(surveillanceListeInformationsRequest, "SurveillanceListeInformationsRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Vous devez fournir la clé d\'utilisation de l\'API ainsi que l\'identifiant de votre liste.
     * @summary Supprime une (ou plusieurs) notification(s) d\'une liste.
     * @param apiToken Clé d\&#39;utilisation de l\&#39;API
     * @param idListe Identifiant unique de votre liste de surveillance
     * @param siren Liste des sirens des notifications à supprimer, séparés par une virgule
     * @param id Liste des ids des notifications à supprimer, séparés par une virgule
     * @param supprimerTotalite Suppression de toutes les notifications de la liste
     */
    public async surveillanceNotificationsDelete (apiToken: string, idListe: string, siren?: string, id?: string, supprimerTotalite?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SurveillanceNotificationsDelete200Response;  }> {
        const localVarPath = this.basePath + '/liste/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'apiToken' is not null or undefined
        if (apiToken === null || apiToken === undefined) {
            throw new Error('Required parameter apiToken was null or undefined when calling surveillanceNotificationsDelete.');
        }

        // verify required parameter 'idListe' is not null or undefined
        if (idListe === null || idListe === undefined) {
            throw new Error('Required parameter idListe was null or undefined when calling surveillanceNotificationsDelete.');
        }

        if (apiToken !== undefined) {
            localVarQueryParameters['api_token'] = ObjectSerializer.serialize(apiToken, "string");
        }

        if (idListe !== undefined) {
            localVarQueryParameters['id_liste'] = ObjectSerializer.serialize(idListe, "string");
        }

        if (siren !== undefined) {
            localVarQueryParameters['siren'] = ObjectSerializer.serialize(siren, "string");
        }

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "string");
        }

        if (supprimerTotalite !== undefined) {
            localVarQueryParameters['supprimer_totalite'] = ObjectSerializer.serialize(supprimerTotalite, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SurveillanceNotificationsDelete200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SurveillanceNotificationsDelete200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
